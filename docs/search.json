[{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"SigRepo","text":"SigRepo package includes suite functions easily storing managing biological signatures constituents. Currently, Sigrepo capable storing, searching, retrieving signatures signature collections MySQL Database choice. See documentation set-MySQL database appropriate schema. order interact suite functions SigRepo package, input data must format R6 objects representation signatures signature collections, can created using proprietary package, OmicSignature. information click links . Overview object structure Create OmicSignature (OmS) Create OmicSignatureCollection (OmSC) demonstrations, walk steps use SigRepo package store, retrieve, interact list signatures stored MySQL SigRepo Database.","code":""},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"SigRepo","text":"Using devtools package","code":"# Load devtools package library(devtools)  # Install SigRepo devtools::install_github(repo = 'montilab/SigRepo')  # Install OmicSignature devtools::install_github(repo = 'montilab/OmicSignature')"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load packages","title":"SigRepo","text":"","code":"# Load tidyverse package library(tidyverse)  # Load SigRepo package library(SigRepo)  # Load OmicSignature package library(OmicSignature)"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"connect-to-sigrepo-database","dir":"Articles","previous_headings":"","what":"Connect to SigRepo Database","title":"SigRepo","text":"adopted MySQL Database structure efficiently storing, searching, retrieving biological signatures constituents. access signatures stored database, MUST register create account contact admin added. three types user accounts: - admin READ WRITE access signatures database. - editor READ WRITE access uploaded signatures database. - viewer READ access view list signatures database WRITE access database. valid account, connection SigRepo Database, one can use newConnHandler() function create handler contain appropriate credentials establish connection database.","code":"# Create a connection handler conn_handler <- SigRepo::newConnHandler(   dbname = \"sigrepo\",    host = \"142.93.67.157\",    port = 3306,    user = \"montilab\",    password = \"sigrepo\" )"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"load-signatures","dir":"Articles","previous_headings":"","what":"Load signatures","title":"SigRepo","text":", provided two signature objects came package demonstrations: omic_signature_1 (Myc_reduce_mice_liver_24m_v1) omic_signature_2 (Myc_reduce_mice_liver_24m_v2)","code":"# Getting the signature path signature_path <- base::system.file(\"inst/data/signatures\", package = \"SigRepo\")  # Read in the signature object omic_signature_1 <- base::readRDS(base::file.path(signature_path, \"omic_signature_1.RDS\")) omic_signature_2 <- base::readRDS(base::file.path(signature_path, \"omic_signature_2.RDS\"))"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"create-an-omic-collection","dir":"Articles","previous_headings":"","what":"Create an omic collection","title":"SigRepo","text":", create collection two signatures, omic_signature_1 omic_signature_1, provided . See ?OmicSignatureCollection() OmicSignature package details create omic collection.","code":"# Create a metadata object for the collection metadata <- base::list(   \"collection_name\" = \"my_collection\",   \"description\" = \"An example of signature collection\" )  # Create an omic collection using OmicSignatureCollection() from OmicSignature package omic_collection <- OmicSignature::OmicSignatureCollection$new(   OmicSigList = base::list(omic_signature_1, omic_signature_2),   metadata = metadata ) #>   [Success] OmicSignature Collection my_collection created."},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"upload-a-collection-to-the-database","dir":"Articles","previous_headings":"","what":"Upload a collection to the database","title":"SigRepo","text":"addCollection() function allows users upload collection database. IMPORTANT NOTE: user MUST editor admin role use function. collection MUST R6 object obtained OmicSignature::OmicSignatureCollection()","code":"SigRepo::addCollection(   conn_handler = conn_handler,        # A handler contains user credentials to establish connection to a remote database   omic_collection = omic_collection,  # An R6 object obtained from OmicSignature::OmicSignatureCollection()   return_collection_id = FALSE,       # Whether to return the uploaded collection id   verbose = TRUE                      # Whether to print diagnostic messages ) #> Uploading each signature in the collection into the database... #>  You already uploaded a signature with the name = 'Myc_reduce_mice_liver_24m_v1' to the SigRepo Database. #>  ID of the uploaded signature: 5 #>  You already uploaded a signature with the name = 'Myc_reduce_mice_liver_24m_v2' to the SigRepo Database. #>  ID of the uploaded signature: 6 #> Uploading collection metadata into the database... #> Adding user to collection access table in the database... #> Adding signature to collection access table in the database... #> Finished uploading. #> ID of the uploaded collection: 2"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"search-for-a-collection-in-the-database","dir":"Articles","previous_headings":"","what":"Search for a collection in the database","title":"SigRepo","text":"searchCollection() function allows users search specific set collection available database.","code":""},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"example-1-search-for-all-collection","dir":"Articles","previous_headings":"Search for a collection in the database","what":"Example 1: Search for all collection","title":"SigRepo","text":"","code":"collection_tbl_1 <- SigRepo::searchCollection(conn_handler = conn_handler)  if(nrow(collection_tbl_1) > 0){   knitr::kable(     collection_tbl_1,      row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"example-2-search-for-a-specific-collection-e-g--collection_name-my_collection-","dir":"Articles","previous_headings":"Search for a collection in the database","what":"Example 2: Search for a specific collection, e.g., collection_name = “my_collection”.","title":"SigRepo","text":"","code":"collection_tbl_2 <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\" )  if(nrow(collection_tbl_2) > 0){   knitr::kable(     collection_tbl_2,      row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"get-a-set-of-collection-in-the-database","dir":"Articles","previous_headings":"","what":"Get a set of collection in the database","title":"SigRepo","text":"getCollection() function allows users retrieve set collection available database.","code":""},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"example-1-get-all-collection-in-the-database","dir":"Articles","previous_headings":"Get a set of collection in the database","what":"Example 1: Get all collection in the database","title":"SigRepo","text":"","code":"collection_list_1 <- SigRepo::getCollection(conn_handler = conn_handler) #> now dyn.load(\"/usr/local/lib/R/site-library/curl/libs/curl.so\") ... #> Error in value[[3L]](cond): Error in private$checkMetadata(metadata, v = print_message): Metadata does not contain attribute(s): phenotype, organism."},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"example-2-get-a-specific-collection-in-the-database-e-g--collection_name-my_collection","dir":"Articles","previous_headings":"Get a set of collection in the database","what":"Example 2: Get a specific collection in the database, e.g., collection_name = “my_collection”","title":"SigRepo","text":"","code":"collection_list_2 <- SigRepo::getCollection(   conn_handler = conn_handler,   collection_name = \"my_collection\" ) #> Error in value[[3L]](cond): Error in private$checkMetadata(metadata, v = print_message): Metadata does not contain attribute(s): phenotype, organism."},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"update-a-collection-metadata","dir":"Articles","previous_headings":"","what":"Update a collection metadata","title":"SigRepo","text":"updateCollectionMetadata() function allows users update metadata information collection database. IMPORTANT NOTE: user MUST editor admin access use function. Furthermore, user can UPDATE uploaded signatures given editor permission users database access perform action. example, wish change description “my_collection” database Now, let’s search my_collection database see description updated.","code":"# Search for my_collection in the database collection_tbl <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\" )  # If the collection exists, update the collection with a new description if(nrow(collection_tbl) > 0){   SigRepo::updateCollectionMetadata(     conn_handler = conn_handler,      collection_id = collection_tbl$collection_id,     description =  \"This is the updated description.\"    ) } #> Error in SigRepo::updateCollectionMetadata(conn_handler = conn_handler, : 'collection_id' must have a length of 1 and cannot be empty. # Search for my_collection in the database collection_tbl <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\" )  # If the collection exists, output data table if(nrow(collection_tbl) > 0){   knitr::kable(     collection_tbl,     row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"add-signatures-to-a-collection-in-the-database","dir":"Articles","previous_headings":"","what":"Add signatures to a collection in the database","title":"SigRepo","text":"updateCollectionMetadata() function allows users add set signatures collection database. IMPORTANT NOTE: user MUST editor admin access use function. Furthermore, user can UPDATE uploaded signatures given editor permission users database access perform action. example, wish add existing signature, e.g., “LLFS_Aging_Gene_2023” “my_collection” database. Now, let’s search my_collection database see signature added collection.","code":"# Search for my_collection in the database collection_tbl <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\" )  # Search for signature in the database signature_tbl <- SigRepo::searchSignature(   conn_handler = conn_handler,    signature_name = \"LLFS_Aging_Gene_2023\" )  # If both collection and signature exists, add signature to collection. if(nrow(collection_tbl) > 0 && nrow(signature_tbl) > 0){   SigRepo::addSignatureToCollection(     conn_handler = conn_handler,      collection_id = collection_tbl$collection_id,     signature_id =  signature_tbl$signature_id   ) } #> Error in SigRepo::addSignatureToCollection(conn_handler = conn_handler, : 'collection_id' must have a length of 1 and cannot be empty. collection_tbl <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\" )  if(nrow(collection_tbl) > 0){   knitr::kable(     collection_tbl,     row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"remove-a-list-of-signatures-from-a-collection-in-the-database","dir":"Articles","previous_headings":"","what":"Remove a list of signatures from a collection in the database","title":"SigRepo","text":"removeSignatureFromCollection() function allows users remove list signatures collection database. IMPORTANT NOTE: user MUST editor admin access use function. Furthermore, user can UPDATE uploaded signatures given editor permission users database access perform action. example, wish remove Myc_reduce_mice_liver_24m_v1 “my_collection” database Now, let’s search my_collection database see signature removed collection.","code":"# Check if signature is in the collection of the database collection_tbl <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\",   signature_name = \"Myc_reduce_mice_liver_24m_v1\" )  # If signature collection combo exists, remove the signature. if(nrow(collection_tbl) > 0){   SigRepo::removeSignatureFromCollection(     conn_handler = conn_handler,      collection_id = collection_tbl$collection_id,     signature_id = collection_tbl$signature_id   ) } #> Removing signature(s) from collection completed. collection_tbl <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\" )  if(nrow(collection_tbl) > 0){   knitr::kable(     collection_tbl,     row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"delete-a-collection-from-the-database","dir":"Articles","previous_headings":"","what":"Delete a collection from the database","title":"SigRepo","text":"deleteCollection() function allows users delete collection database. IMPORTANT NOTE: user MUST editor admin access use function. Furthermore, user can DELETE uploaded collections given editor permission users database access delete collection. collection can REMOVED DELETED time. Now, let’s search my_collection database see collection removed.","code":"# Search for my_collection in the database  collection_tbl <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\" )  # If the collection exists, remove it from the database if(nrow(collection_tbl) > 0){   SigRepo::deleteCollection(     conn_handler = conn_handler,      collection_id = collection_tbl$collection_id   ) } #> Remove collection_id = '2' from 'collection' table of the database. #> Remove collection_id = '2' from 'collection_access' table of the database. #> Remove signatures belongs to collection_id = '2' from 'signature_collection_access' table of the database. #> collection_id = '2' has been removed. collection_tbl <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\" ) #> There are no collection returned from the search parameters. if(nrow(collection_tbl) > 0){   knitr::kable(     collection_tbl,     row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/articles/docker.html","id":"software-requirements","dir":"Articles","previous_headings":"","what":"Software requirements","title":"How to run SigRepo Shiny within a Docker Environment","text":"Git version >= 2.21 Docker version >= 20.10 Don’t Git installed, see Git Guides Don’t Docker installed, download Docker Engine compatible machine NOTE: may need restart computer Docker kicks-Check Docker installed Check Docker Compose installed","code":"docker --version docker compose version"},{"path":"https://montilab.github.io/SigRepo/articles/docker.html","id":"set-up-mysql-database","dir":"Articles","previous_headings":"","what":"Set Up Mysql Database","title":"How to run SigRepo Shiny within a Docker Environment","text":"Explore set-SigRepo database schema via Docker details","code":""},{"path":"https://montilab.github.io/SigRepo/articles/docker.html","id":"run-sigrepo-shiny-dashboard","dir":"Articles","previous_headings":"","what":"Run SigRepo Shiny Dashboard","title":"How to run SigRepo Shiny within a Docker Environment","text":"Clone repository navigate SigRepo folder Create .Renviron file store credentials log remote SigRepo Database Create docker-compose-sigrepo-shiny.yml configure build Sigrepo Shiny image container. Start Sigrepo Shiny containers -f: name docker compose file -d: run container detached mode Check container built successfully Based output , sigrepo-shiny dashboard published port 8050 host machine, 3838 port sigrepo-shiny published inside Docker container. Noted requests made host machine automatically redirected Docker container Shiny app launched deployed. Access SigRepo dashboard localhost Using preferred web browser, type http://localhost:8050 see SigRepo dashboard indeed hosted .  questions issues? Please report github issues.","code":"git clone https://github.com/montilab/SigRepo cd SigRepo DBNAME = \"database_name\" HOST = \"host_ip_address\" PORT = \"port\" USER = \"username\" PASSWORD = \"password\" services:   sigrepo-shiny:     container_name: sigrepo-shiny     image: sigrepo-shiny:latest     build:       context: .       dockerfile: Dockerfile       args:         - R_VERSION=4.4.0     networks:       - db-net     ports:       - 8050:3838     restart: always     volumes:       - /montilab-p/Sigrepo/.Renviron:/root/.Renviron     command: tail -f /dev/null docker compose -f docker-compose-sigrepo-shiny.yml up -d docker ps   CONTAINER ID   IMAGE                  COMMAND                    CREATED        STATUS        PORTS                    NAMES b37b6b19c4e8   sigrepo-shiny:latest   \"/bin/bash -c /user/...\"   5 hours ago    Up 5 hours    0.0.0.0:8050->3838/tcp   sigrepo-shiny"},{"path":"https://montilab.github.io/SigRepo/articles/install-sigrepo-externally.html","id":"software-requirements","dir":"Articles","previous_headings":"","what":"Software requirements","title":"Install Sigrepo Externally","text":"Git version >= 2.21 Docker version >= 20.10 Don’t Git installed, see Git Guides Don’t Docker installed, download Docker Engine compatible machine NOTE: may need restart computer Docker kicks-Check Docker installed Check Docker Compose installed","code":"docker --version docker compose version"},{"path":"https://montilab.github.io/SigRepo/articles/install-sigrepo-externally.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set-up","title":"Install Sigrepo Externally","text":"Clone repository navigate SigRepo folder Create mysql.env file initiate database ROOT SUPER USER MySQL database PARAMETERS: MYSQL_DATABASE: Name database MYSQL_USER: name super user database (e.g., sudo privileges) MYSQL_PASSWORD: Password super user MYSQL_ROOT_PASSWORD: Password root user MYSQL_ROOT_HOST: Allow database access everyone just locally. ‘%’ gives access everyone. IMPORTANT NOTES: use base MySQL image initiate database. Please see official image details list environment variable allows. Environment variables just dummy values. Please changes encrypted values. Create MySQL directory store database tables schema Create network db-net host MySQL locally Edit docker-compose.yml configure build MySQL image run container. Map MySQL directory created (3) container /var/lib/mysql directory. Map MySQL schema initiation script (init.sql) stored SigRepo/inst/mysql/schema directory container /docker-entrypoint-initdb.d/init.sql directory order initiate database tables schema. Build MySQL image run container -d: run container detached mode Check container built successfully Get host name server example: montilab.bu.edu Create .Renviron file credentials access database store $HOME Project directory. IMPORTANT NOTES: Environment variables just dummy values. Please changes encrypted values. Connect MySQL server local RStudio Server using .Renviron created (9)","code":"git clone https://github.com/montilab/SigRepo cd SigRepo MYSQL_DATABASE='sigrepo' MYSQL_USER='admin' MYSQL_PASSWORD='admin' MYSQL_ROOT_PASSWORD='123456' MYSQL_ROOT_HOST='%' mkdir /montilab-p/mysql docker network create -d bridge db-net services:   sigrepo-mysql:     container_name: sigrepo-mysql     image: sigrepo-mysql:latest     build:       context: .       dockerfile: Dockerfile-mysql       args:         - mysql_image=mysql:8.0-bookworm     env_file:       - mysql.env     volumes:       - /montilab-p/mysql:/var/lib/mysql:rw       - /montilab-p/SigRepo/inst/mysql/schema/init.sql:/docker-entrypoint-initdb.d/init.sql:rw     networks:       - db-net     ports:       - 3306:3306     restart: always  networks:   db-net:     external: true docker compose up -d docker ps   CONTAINER ID   IMAGE                  COMMAND                    CREATED        STATUS        PORTS                    NAMES b37b6b19c4e8   sigrepo-mysql:latest   \"docker-entrypoint.s...\"   5 hours ago    Up 5 hours    0.0.0.0:3306->3838/tcp   sigrepo-mysql hostname uname -n DBNAME = \"sigrepo\" HOST = \"montilab.bu.edu\" PORT = 3306 USER = \"root\" PASSWORD = \"123456\" # For DB connection library(RMySQL) library(DBI)  ## Establish database connection conn <- DBI::dbConnect(   drv = RMySQL::MySQL(),   dbname = Sys.getenv(\"DBNAME\"),    host = Sys.getenv(\"HOST\"),    port = as.integer(Sys.getenv(\"PORT\")),    user = Sys.getenv(\"USER\"),    password = Sys.getenv(\"PASSWORD\") )"},{"path":"https://montilab.github.io/SigRepo/articles/install-sigrepo-locally.html","id":"software-requirements","dir":"Articles","previous_headings":"","what":"Software requirements","title":"Install Sigrepo Database Locally","text":"Git version >= 2.21 Docker version >= 20.10 Don’t Git installed, see Git Guides Don’t Docker installed, download Docker Engine compatible machine NOTE: may need restart computer Docker kicks-Check Docker installed Check Docker Compose installed","code":"docker --version docker compose version"},{"path":"https://montilab.github.io/SigRepo/articles/install-sigrepo-locally.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set-up","title":"Install Sigrepo Database Locally","text":"Clone repository navigate SigRepo folder Create mysql.env file initiate database users MySQL database IMPORTANT NOTES: use base MySQL image initiate database. Please see official image details list environment variable allows. Environment variables just dummy values. Please changes encrypted values. Create network db-net host MySQL locally Edit docker-compose.yml configure build MySQL image run container. Map MySQL directory created (3) container /var/lib/mysql directory. Map MySQL schema initiation script (init.sql) stored SigRepo/inst/mysql/schema directory container /docker-entrypoint-initdb.d/init.sql directory order initiate database tables schema. Build MySQL image run container -d: run container detached mode Check container built successfully Create .Renviron file credentials access database store $HOME Project directory. NOTES: 127.0.0.1 localhost IP address. Connect MySQL server local RStudio Server using .Renviron created (8)","code":"git clone https://github.com/montilab/SigRepo cd SigRepo MYSQL_DATABASE='sigrepo' MYSQL_USER='admin' MYSQL_PASSWORD='admin' MYSQL_ROOT_PASSWORD='123456' docker network create -d bridge db-net services:   sigrepo-mysql:     container_name: sigrepo-mysql     image: sigrepo-mysql:latest     build:       context: .       dockerfile: Dockerfile-mysql       args:         - mysql_image=mysql:8.0-bookworm     env_file:       - mysql.env     volumes:       - /montilab-p/mysql/database:/var/lib/mysql:rw       - /montilab-p/SigRepo/inst/mysql/schema/init.sql:/docker-entrypoint-initdb.d/init.sql:rw     networks:       - db-net     ports:       - 3306:3306     restart: always        networks:   db-net:     external: true docker compose up -d docker ps   CONTAINER ID   IMAGE                  COMMAND                    CREATED        STATUS        PORTS                    NAMES b37b6b19c4e8   sigrepo-mysql:latest   \"docker-entrypoint.s...\"   5 hours ago    Up 5 hours    0.0.0.0:3306->3838/tcp   sigrepo-mysql DBNAME = \"sigrepo\" HOST = \"127.0.0.1\" PORT = 3306 USER = \"root\" PASSWORD = \"123456\" # For DB connection library(RMySQL) library(DBI)  ## Establish database connection conn <- DBI::dbConnect(   drv = RMySQL::MySQL(),   dbname = Sys.getenv(\"DBNAME\"),    host = Sys.getenv(\"HOST\"),    port = as.integer(Sys.getenv(\"PORT\")),    user = Sys.getenv(\"USER\"),    password = Sys.getenv(\"PASSWORD\") )"},{"path":"https://montilab.github.io/SigRepo/articles/retrieveSignatures.html","id":"configuration","dir":"Articles","previous_headings":"","what":"Configuration","title":"Retrieve Signatures","text":"SigRepoR interacts servers (possibly) current working computer. Therefor, proceeding uploading signatures, ’s important first configure session point database upload , along write files file system.","code":"configureSigRepo(     # Where do the OmicSignatures live in the server's fileSystem?     signatureDirectory=         \"/opt/shiny-server/challenge_project/miscellanea/signatures/\",     databaseServer=\"sigrepo.bu.edu\", # Where's the database?     databasePort=\"4253\", # What port is the database server using?     applicationPort=\"\",     signatureServer=\"sigrepo.bu.edu\" # What server has the OmicSignatures? )"},{"path":"https://montilab.github.io/SigRepo/articles/retrieveSignatures.html","id":"retrieve-signatures","dir":"Articles","previous_headings":"","what":"Retrieve Signatures","title":"Retrieve Signatures","text":"Now, can retrieve signatures ways","code":""},{"path":"https://montilab.github.io/SigRepo/articles/retrieveSignatures.html","id":"getsignatures","dir":"Articles","previous_headings":"Retrieve Signatures","what":"getSignatures()","title":"Retrieve Signatures","text":"function returns named list metadata: containing general information signature level2: requested, level2 signature representation signatures can get signatures based list signature names, granular queries, can use sqlFindingQuery()","code":""},{"path":"https://montilab.github.io/SigRepo/articles/retrieveSignatures.html","id":"sqlfindingquery","dir":"Articles","previous_headings":"Retrieve Signatures","what":"sqlFindingQuery","title":"Retrieve Signatures","text":"can use sqlFindingQuery query SQL database interest without prior knowledge SQL. want grab level2 data function, can either make query scratch, pass complex “subqueries” based search critera","code":"# gets general metadata for signatures #  exampleSignatures <- sqlFindingQuery(     \"signature_view\",     fields=c(\"signature_name\"),     # Now for the query     # Here I just want human signatures     ins=list(         \"species\"=c(\"Homo sapiens\")     ) ) sqlFindingQuery(     \"feature_signature_view\",     ins = list(         \"signature_name\" = sqlFindingQuery(             \"signature_view\",             fields = c(\"signature_name\"),             # Now for the query             # Here I just want human signatures             ins = list(\"species\" = c(\"Homo sapiens\"))         )$signature_name     ) ) sqlFindingQuery(     \"feature_signature_view\",     ins = list(         \"signature_name\" = exampleSignatures     ) )"},{"path":"https://montilab.github.io/SigRepo/articles/retrieveSignatures.html","id":"retrieve-other-information","dir":"Articles","previous_headings":"","what":"Retrieve Other Information","title":"Retrieve Signatures","text":"Perhaps helpful tools starting , familiar database setup, getTables getTableFields","code":""},{"path":"https://montilab.github.io/SigRepo/articles/retrieveSignatures.html","id":"database-information","dir":"Articles","previous_headings":"Retrieve Other Information","what":"Database Information","title":"Retrieve Signatures","text":"getTables list tables views database want know fields given table, helpful removing fields may want query, getTableFields(tableName) lists fields given table, along datatypes","code":"getTables() getTableFields(\"signature_view\")"},{"path":"https://montilab.github.io/SigRepo/articles/retrieveSignatures.html","id":"platforms","dir":"Articles","previous_headings":"Retrieve Other Information","what":"Platforms","title":"Retrieve Signatures","text":"getAssayPlatforms() gets assay platforms exist SigRepo DB instance ’re pointing .","code":"getAssayPlatforms()"},{"path":"https://montilab.github.io/SigRepo/articles/retrieveSignatures.html","id":"level-2-representation","dir":"Articles","previous_headings":"Retrieve Other Information","what":"Level 2 Representation","title":"Retrieve Signatures","text":"just want level 2 representation signatures interest, getLevel2 . ’s essentially wrapper sqlFindingQuery pointing feature_view table database. signature-feature pair, ’ll get name feature, score, direction.","code":"getLevel2(     insList=list(         \"same_structure\"=c(\"As the ins parameter in sqlFindingQuery\")     ) )"},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"SigRepo","text":"SigRepo package includes suite functions easily storing managing biological signatures constituents. Currently, Sigrepo capable storing, searching, retrieving signatures signature collections MySQL Database choice. See documentation set-MySQL database appropriate schema. order interact suite functions SigRepo package, input data must format R6 objects representation signatures signature collections, can created using proprietary package, OmicSignature. information click links . Overview object structure Create OmicSignature (OmS) Create OmicSignatureCollection (OmSC) demonstrations, walk steps use SigRepo package store, retrieve, interact list signatures stored MySQL SigRepo Database.","code":""},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"SigRepo","text":"Using devtools package","code":"# Load devtools package library(devtools)  # Install SigRepo devtools::install_github(repo = 'montilab/SigRepo')  # Install OmicSignature devtools::install_github(repo = 'montilab/OmicSignature')"},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load packages","title":"SigRepo","text":"","code":"# Load tidyverse package library(tidyverse)  # Load SigRepo package library(SigRepo)  # Load OmicSignature package library(OmicSignature)"},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"connect-to-sigrepo-database","dir":"Articles","previous_headings":"","what":"Connect to SigRepo Database","title":"SigRepo","text":"adopted MySQL Database structure efficiently storing, searching, retrieving biological signatures constituents. access signatures stored database, MUST register create account contact admin added. three types user accounts: - admin READ WRITE access signatures database. - editor READ WRITE access uploaded signatures database. - viewer READ access see list signatures database WRITE access database. valid account, connection SigRepo Database, one can use newConnHandler() function create handler contain appropriate credentials establish connection database.","code":"# Create a connection handler conn_handler <- SigRepo::newConnHandler(   dbname = \"sigrepo\",    host = \"142.93.67.157\",    port = 3306,    user = \"montilab\",    password = \"sigrepo\" )"},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"load-signatures","dir":"Articles","previous_headings":"","what":"Load Signatures","title":"SigRepo","text":", provided two signature objects came package demonstrations: omic_signature_AGS_OmS omic_signature_MDA_CYP","code":"# Getting the signature path signature_path <- base::system.file(\"inst/data/signatures\", package = \"SigRepo\")  # Read in the signature object omic_signature_AGS_OmS <- base::readRDS(base::file.path(signature_path, \"omic_signature_AGS_OmS.RDS\")) omic_signature_MDA_CYP <- base::readRDS(base::file.path(signature_path, \"omic_signature_MDA_CYP.RDS\"))"},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"upload-a-signature","dir":"Articles","previous_headings":"","what":"Upload a signature","title":"SigRepo","text":"function addSignature() allows users upload signature database. IMPORTANT NOTE: user MUST editor admin access use function.","code":""},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"example-1-create-an-omic-signature-using-omicsignature-package-and-upload-to-database","dir":"Articles","previous_headings":"Upload a signature","what":"Example 1: Create an omic signature using OmicSignature package and upload to database","title":"SigRepo","text":"","code":"# Create signature metadata metadata <- base::list(   # required attributes:   signature_name = \"Myc_reduce_mice_liver_24m\",   organism = \"Mus Musculus\",   direction_type = \"bi-directional\",   assay_type = \"transcriptomics\",   phenotype = \"Myc_reduce\",      # optional and recommended:   covariates = \"none\",   description = \"mice MYC reduced expression\",   platform = \"GPL6246\", # use GEO platform ID   sample_type = \"liver\", # use BRENDA ontology      # optional cut-off attributes.   # specifying them can facilitate the extraction of signatures.   logfc_cutoff = NULL,   p_value_cutoff = NULL,   adj_p_cutoff = 0.05,   score_cutoff = 5,      # other optional built-in attributes:   keywords = c(\"Myc\", \"KO\", \"longevity\"),   cutoff_description = NULL,   author = NULL,   PMID = 25619689,   year = 2015,      # example of customized attributes:   others = list(\"animal_strain\" = \"C57BL/6\") )  # Create difexp object difexp <- base::readRDS(file.path(system.file(\"extdata\", package = \"OmicSignature\"), \"difmatrix_Myc_mice_liver_24m.rds\")) %>% dplyr::rename(feature_name = ensembl) colnames(difexp) <- OmicSignature::replaceDifexpCol(colnames(difexp))  # Create signature object signature <- difexp %>%   dplyr::filter(abs(score) > metadata$score_cutoff & adj_p < metadata$adj_p_cutoff) %>%   dplyr::select(probe_id, feature_name, score) %>%   dplyr::mutate(direction = ifelse(score > 0, \"+\", \"-\"))  # Create signature object  omic_signature <- OmicSignature::OmicSignature$new(   metadata = metadata,   signature = signature,   difexp = difexp ) #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m created. # Add signature to database SigRepo::addSignature(   conn_handler = conn_handler,        # A handler contains user credentials to establish connection to a remote database   omic_signature = omic_signature,    # An R6 object obtained from OmicSignature::OmicSignature()   return_signature_id = FALSE,        # Whether to return the uploaded signature id   verbose = TRUE                      # Whether to print diagnostic messages ) #> Uploading signature metadata into the database... #> Saving difexp to the database... #> Warning in find.package(package, lib.loc, quiet = TRUE): package 'SigRepo' found more than once, using the first from #>   \"/home/SigRepo\", #>   \"/tmp/Rtmp01equG/temp_libpath64449adff3/SigRepo\" #> now dyn.load(\"/usr/local/lib/R/site-library/curl/libs/curl.so\") ... #> Adding user to the signature access table of the database... #> Adding signature feature set to the database... #> Finished uploading. #> ID of the uploaded signature: 28"},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"example-2-upload-omic_signature_ags_oms-signature","dir":"Articles","previous_headings":"Upload a signature","what":"Example 2: Upload omic_signature_AGS_OmS signature","title":"SigRepo","text":"","code":"SigRepo::addSignature(   conn_handler = conn_handler,    omic_signature = omic_signature_AGS_OmS ) #>  You already uploaded a signature with the name = 'LLFS_Aging_Gene_2023' to the SigRepo Database. #>  ID of the uploaded signature: 3"},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"example-3-upload-omic_signature_mda_cyp-signature","dir":"Articles","previous_headings":"Upload a signature","what":"Example 3: Upload omic_signature_MDA_CYP signature","title":"SigRepo","text":"","code":"SigRepo::addSignature(   conn_handler = conn_handler,    omic_signature = omic_signature_MDA_CYP ) #> Uploading signature metadata into the database... #> Saving difexp to the database... #> Warning in find.package(package, lib.loc, quiet = TRUE): package 'SigRepo' found more than once, using the first from #>   \"/home/SigRepo\", #>   \"/tmp/Rtmp01equG/temp_libpath64449adff3/SigRepo\" #> Adding user to the signature access table of the database... #> Adding signature feature set to the database... #> Error in value[[3L]](cond): Error in SigRepo::showTranscriptomicsErrorMessage(db_table_name = ref_table, :  #> The following features do not existed in the 'transcriptomics_features' table of the database: #> 'ENSG00000281508' #> 'ENSG00000199900' #> 'ENSG00000247844' #> 'ENSG00000258777' #> 'ENSG00000230836' #> 'ENSG00000204282' #> 'ENSG00000179979' #> 'ENSG00000198384' #> 'ENSG00000277203' #> 'ENSG00000250889' #> 'ENSG00000170647' #> 'ENSG00000276797' #> 'ENSG00000237975' #> 'ENSG00000241990' #> 'ENSG00000155640' #> 'ENSG00000199404' #> 'ENSG00000230641' #> 'ENSG00000227895' #> 'ENSG00000150526' #> 'ENSG00000277555' #> 'ENSG00000274744' #> 'ENSG00000250588' #> 'ENSG00000223414' #> 'ENSG00000184258' #> 'ENSG00000228265' #> 'ENSG00000146521' #> 'ENSG00000232224' #> 'ENSG00000256045' #> 'ENSG00000240875' #> 'ENSG00000182584' #> 'ENSG00000239332' #> 'ENSG00000186354' #> 'ENSG00000200649' #> 'ENSG00000225163' #> 'ENSG00000255145' #> 'ENSG00000228439' #> 'ENSG00000201126' #> 'ENSG00000225986' #> 'ENSG00000238648' #> 'ENSG00000228393' #> 'ENSG00000112096' #> 'ENSG00000170590' #> 'ENSG00000269028' #> 'ENSG00000280524' #> 'ENSG00000238266' #> 'ENSG00000235825' #> 'ENSG00000243587' #> 'ENSG00000203441' #> 'ENSG00000207770' #> 'ENSG00000132832' #> 'ENSG00000236850' #> 'ENSG00000235884' #> 'ENSG00000249860' #> 'ENSG00000215271' #> 'ENSG00000256164' #> 'ENSG00000215067' #> 'ENSG00000223797' #> 'ENSG00000244349' #> 'ENSG00000208035' #> 'ENSG00000255090' #> 'ENSG00000242349' #> You can use 'searchFeature()' to see a list of available features in the database. #> To add these features to our database, please contact our admin for support."},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"search-for-a-list-of-signatures","dir":"Articles","previous_headings":"","what":"Search for a list of signatures","title":"SigRepo","text":"searchSignature() function allows users search specific set signatures available database.","code":""},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"example-1-search-for-all-signatures","dir":"Articles","previous_headings":"Search for a list of signatures","what":"Example 1: Search for all signatures","title":"SigRepo","text":"","code":"signature_tbl <- SigRepo::searchSignature(conn_handler = conn_handler)  if(nrow(signature_tbl) > 0){   knitr::kable(     signature_tbl,      row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"example-2-search-for-a-specific-signature-e-g--signature_name-llfs_aging_gene_2023-","dir":"Articles","previous_headings":"Search for a list of signatures","what":"Example 2: Search for a specific signature, e.g., signature_name = “LLFS_Aging_Gene_2023”.","title":"SigRepo","text":"","code":"signature_tbl <- SigRepo::searchSignature(   conn_handler = conn_handler,    signature_name = \"LLFS_Aging_Gene_2023\" )  if(nrow(signature_tbl) > 0){   knitr::kable(     signature_tbl,      row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"retrieve-a-list-of-omic-signatures","dir":"Articles","previous_headings":"","what":"Retrieve a list of omic signatures","title":"SigRepo","text":"getSignature() function allows users retrieve list omic signature objects previously uploaded database. IMPORTANT NOTE: user MUST editor admin access use function. Furthermore, user can RETRIEVE uploaded signatures given editor permission users database access signatures.","code":""},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"example-1-retrieve-all-signatures","dir":"Articles","previous_headings":"Retrieve a list of omic signatures","what":"Example 1: Retrieve all signatures","title":"SigRepo","text":"","code":"signature_list <- SigRepo::getSignature(conn_handler = conn_handler) #>   [Success] OmicSignature object LLFS_Aging_Gene_2023 created. #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m_v1 created. #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m_v2 created. #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m created."},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"example-2-retrieve-a-specific-signature-e-g--signature_name-llfs_aging_gene_2023","dir":"Articles","previous_headings":"Retrieve a list of omic signatures","what":"Example 2: Retrieve a specific signature, e.g., signature_name = “LLFS_Aging_Gene_2023”","title":"SigRepo","text":"","code":"LLFS_oms <- SigRepo::getSignature(   conn_handler = conn_handler,    signature_name = \"LLFS_Aging_Gene_2023\" ) #>   [Success] OmicSignature object LLFS_Aging_Gene_2023 created."},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"update-a-signature","dir":"Articles","previous_headings":"","what":"Update a signature","title":"SigRepo","text":"updateSignature() function allows users update specific signature SigRepo database. IMPORTANT NOTE: user MUST editor admin access use function. Furthermore, user can UPDATE uploaded signatures given editor permission users database access edit signatures. example: platform information previous uploaded signature, “Myc_reduce_mice_liver_24m”, incorrect, wish update platform information correct value, e.g., platform = “GPLXXXXX”. can use updateSignature() function follows: Now look signature_name = “Myc_reduce_mice_liver_24m” see value platform changed.","code":"# Revise the metadata object with new platform = GPLXXXXX metadata_revised <- base::list(   # required attributes:   signature_name = \"Myc_reduce_mice_liver_24m\",   organism = \"Mus Musculus\",   direction_type = \"bi-directional\",   assay_type = \"transcriptomics\",   phenotype = \"Myc_reduce\",      # optional and recommended:   covariates = \"none\",   description = \"mice MYC reduced expression\",   platform = \"GPLXXXXX\", # use GEO platform ID   sample_type = \"liver\", # use BRENDA ontology      # optional cut-off attributes.   # specifying them can facilitate the extraction of signatures.   logfc_cutoff = NULL,   p_value_cutoff = NULL,   adj_p_cutoff = 0.05,   score_cutoff = 5,      # other optional built-in attributes:   keywords = c(\"Myc\", \"KO\", \"longevity\"),   cutoff_description = NULL,   author = NULL,   PMID = 25619689,   year = 2015,      # example of customized attributes:   others = list(\"animal_strain\" = \"C57BL/6\") )  # Create difexp object difexp <- readRDS(file.path(system.file(\"extdata\", package = \"OmicSignature\"), \"difmatrix_Myc_mice_liver_24m.rds\")) %>% dplyr::rename(feature_name = ensembl) colnames(difexp) <- OmicSignature::replaceDifexpCol(colnames(difexp))  # Create signature object signature <- difexp %>%   dplyr::filter(abs(score) > metadata_revised$score_cutoff & adj_p < metadata_revised$adj_p_cutoff) %>%   dplyr::select(probe_id, feature_name, score) %>%   dplyr::mutate(direction = ifelse(score > 0, \"+\", \"-\"))  # Create the updated OmicSignature object updated_omic_signature <- OmicSignature::OmicSignature$new(   signature = signature,   metadata = metadata_revised,   difexp = difexp ) #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m created. # Now search for Myc_reduce_mice_liver_24m in the database # in which we would like to revise the value of platform to GPLXXXXX signature_tbl <- SigRepo::searchSignature(   conn_handler = conn_handler,    signature_name = metadata_revised$signature_name )  # Updating the signature with the revised omic_signature object if(nrow(signature_tbl) > 0){   SigRepo::updateSignature(     conn_handler = conn_handler,      signature_id = signature_tbl$signature_id,      omic_signature = updated_omic_signature   ) } #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m created. #> Warning in find.package(package, lib.loc, quiet = TRUE): package 'SigRepo' found more than once, using the first from #>   \"/home/SigRepo\", #>   \"/tmp/Rtmp01equG/temp_libpath64449adff3/SigRepo\" #>  signature_id = '28' has been updated. signature_tbl <- SigRepo::searchSignature(   conn_handler = conn_handler,    signature_name = \"Myc_reduce_mice_liver_24m\" )  if(nrow(signature_tbl) > 0){   knitr::kable(     signature_tbl,     row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/articles/signature-tutorials.html","id":"delete-a-signature","dir":"Articles","previous_headings":"","what":"Delete a signature","title":"SigRepo","text":"deleteSignature() function allows users delete signature database. IMPORTANT NOTE: user MUST editor admin access use function. Furthermore, user can DELETE uploaded signatures given editor permission users access delete signatures. example: want remove signature_name = “Myc_reduce_mice_liver_24m” database.","code":"# Search for Myc_reduce_mice_liver_24m in the database and remove it signature_tbl <- SigRepo::searchSignature(   conn_handler = conn_handler,    signature_name = \"Myc_reduce_mice_liver_24m\" )  # Remove signature from the database if(nrow(signature_tbl) > 0){   SigRepo::deleteSignature(     conn_handler = conn_handler,      signature_id = signature_tbl$signature_id   ) } #> Remove signature_id = '28' from 'signatures' table of the database. #> Remove features belongs to signature_id = '28' from 'signature_feature_set' table of the database. #> Remove user access to signature_id = '28' from 'signature_access' table of the database. #> Remove signature_id = '28' from 'signature_collection_access' table of the database. #> signature_id = '28' has been removed."},{"path":"https://montilab.github.io/SigRepo/articles/uploadSignatures.html","id":"configuration","dir":"Articles","previous_headings":"","what":"Configuration","title":"Upload Signatures","text":"SigRepoR interacts servers (possibly) current working computer. Therefor, proceeding uploading signatures, ’s important first configure session point database upload , along write files file system. Now, downstream queries, ’ll able establish connections future without needing specify server query repeatedly. Assuming already OmicSignature object created, let’s work uploading.","code":"configureSigRepo(     # Where do the OmicSignatures live in the server's fileSystem?     signatureDirectory=         \"/opt/shiny-server/challenge_project/miscellanea/signatures/\",     databaseServer=\"sigrepo.bu.edu\", # Where's the database?     databasePort=\"4253\", # What port is the database server using?     applicationPort=\"\",     signatureServer=\"sigrepo.bu.edu\" # What server has the OmicSignatures? )"},{"path":"https://montilab.github.io/SigRepo/articles/uploadSignatures.html","id":"uploading-omicsignature-object","dir":"Articles","previous_headings":"","what":"Uploading OmicSignature Object","title":"Upload Signatures","text":"upload object completely back-end executing : writes object file disk inserts signature metadata signatures table database(addSignature) inserts level2 data object features_signatures table database(addLevel2). inserts signature-keyword pairs keyword_signatures table database(addSignatureKeywords).","code":"addSignatureWrapper(     yourObjectOrFileOfObject,     thisHandle=yourConnectionHandle,     uploadPath=sys.getenv(\"signatureDirectory\"),     user=\"your SigRepo Username\",     verbose=T )"},{"path":"https://montilab.github.io/SigRepo/articles/uploadSignatures.html","id":"uploading-omicsignaturecollection-objects","dir":"Articles","previous_headings":"","what":"Uploading OmicSignatureCollection Objects","title":"Upload Signatures","text":"OmicSignatureCollection Objects simply group Omic Signature objects. can upload objects like : function: “unpacks” OmicSignatureCollection getting “OmicSigList” property runs lapply function “addSignatureWrapper” list inserts signature--collection pairs signature--collection table database(addCollectionSignatures) collection ’re uploading doesn’t exist entry collections table database, addCollectionSignatures function add collection new entry collections table uploading pairs.","code":"addSignatureCollection(     OmicSignatureCollectionObj,      connHandle,   uploadPath=sys.getenv(\"signatureDirectory\"),    thisUser=\"your SigRepo User Name\" )"},{"path":"https://montilab.github.io/SigRepo/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Reina Chau. Author, maintainer. Cameron Vicnaire. Author. Mengze Li. Author. Stefano Monti. Author.","code":""},{"path":"https://montilab.github.io/SigRepo/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chau R, Vicnaire C, Li M, Monti S (2025). SigRepo: Storing processing omic signature. R package version 1.0.0, https://github.com/montilab/SigRepo/.","code":"@Manual{,   title = {SigRepo: Storing and processing omic signature},   author = {Reina Chau and Cameron Vicnaire and Mengze Li and Stefano Monti},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/montilab/SigRepo/}, }"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"sigrepo","dir":"","previous_headings":"","what":"SigRepo","title":"SigRepo","text":"SigRepo package includes suite functions easily storing managing biological signatures constituents. Currently, Sigrepo capable storing, searching, retrieving signatures signature collections MySQL Database choice. See documentation set-MySQL database appropriate schema. order interact suite functions SigRepo package, input data must format R6 objects representation signatures signature collections, can created using proprietary package, OmicSignature. information click links . Overview object structure Create OmicSignature (OmS) Create OmicSignatureCollection (OmSC) demonstrations, walk steps use SigRepo package store, retrieve, interact list signatures stored MySQL SigRepo Database.","code":""},{"path":"https://montilab.github.io/SigRepo/index.html","id":"additional-guides","dir":"","previous_headings":"","what":"Additional Guides","title":"SigRepo","text":"install SigRepo via Docker","code":""},{"path":"https://montilab.github.io/SigRepo/index.html","id":"contacts","dir":"","previous_headings":"","what":"Contacts","title":"SigRepo","text":"Reina Chau - rchau88@bu.edu Cameron Vicnaire - camv@bu.edu Vanessa Mengze Li - vmli@bu.edu Stefano Monti - smonti@bu.edu","code":""},{"path":"https://montilab.github.io/SigRepo/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"SigRepo","text":"Using devtools package","code":"# Load devtools package library(devtools)  # Install SigRepo devtools::install_github(repo = 'montilab/SigRepo')  # Install OmicSignature devtools::install_github(repo = 'montilab/OmicSignature')"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"load-packages","dir":"","previous_headings":"","what":"Load packages","title":"SigRepo","text":"","code":"# Load tidyverse package library(tidyverse)  # Load SigRepo package library(SigRepo)  # Load OmicSignature package library(OmicSignature)"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"connect-to-sigrepo-database","dir":"","previous_headings":"","what":"Connect to SigRepo Database","title":"SigRepo","text":"adopted MySQL Database structure efficiently storing, searching, retrieving biological signatures constituents. access signatures stored database, MUST register create account contact admin added. three types user accounts: - admin READ WRITE access signatures database. - editor READ WRITE access uploaded signatures database. - viewer READ access see list signatures database WRITE access database. valid account, connection SigRepo Database, one can use newConnHandler() function create handler contain appropriate credentials establish connection database.","code":"# Create a connection handler conn_handler <- SigRepo::newConnHandler(   dbname = \"sigrepo\",    host = \"142.93.67.157\",    port = 3306,    user = \"montilab\",    password = \"sigrepo\" )"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"load-signatures","dir":"","previous_headings":"","what":"Load Signatures","title":"SigRepo","text":", provided two signature objects came package demonstrations: omic_signature_AGS_OmS omic_signature_MDA_CYP","code":"# Getting the signature path signature_path <- base::system.file(\"inst/data/signatures\", package = \"SigRepo\")  # Read in the signature object omic_signature_AGS_OmS <- base::readRDS(base::file.path(signature_path, \"omic_signature_AGS_OmS.RDS\")) omic_signature_MDA_CYP <- base::readRDS(base::file.path(signature_path, \"omic_signature_MDA_CYP.RDS\"))"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"upload-a-signature","dir":"","previous_headings":"","what":"Upload a signature","title":"SigRepo","text":"function addSignature() allows users upload signature database. IMPORTANT NOTE: user MUST editor admin access use function.","code":""},{"path":"https://montilab.github.io/SigRepo/index.html","id":"example-1-create-an-omic-signature-using-omicsignature-package-and-upload-to-database","dir":"","previous_headings":"","what":"Example 1: Create an omic signature using OmicSignature package and upload to database","title":"SigRepo","text":"","code":"# Create signature metadata metadata <- base::list(   # required attributes:   signature_name = \"Myc_reduce_mice_liver_24m\",   organism = \"Mus Musculus\",   direction_type = \"bi-directional\",   assay_type = \"transcriptomics\",   phenotype = \"Myc_reduce\",      # optional and recommended:   covariates = \"none\",   description = \"mice MYC reduced expression\",   platform = \"GPL6246\", # use GEO platform ID   sample_type = \"liver\", # use BRENDA ontology      # optional cut-off attributes.   # specifying them can facilitate the extraction of signatures.   logfc_cutoff = NULL,   p_value_cutoff = NULL,   adj_p_cutoff = 0.05,   score_cutoff = 5,      # other optional built-in attributes:   keywords = c(\"Myc\", \"KO\", \"longevity\"),   cutoff_description = NULL,   author = NULL,   PMID = 25619689,   year = 2015,      # example of customized attributes:   others = list(\"animal_strain\" = \"C57BL/6\") )  # Create difexp object difexp <- base::readRDS(file.path(system.file(\"extdata\", package = \"OmicSignature\"), \"difmatrix_Myc_mice_liver_24m.rds\")) %>% dplyr::rename(feature_name = ensembl) colnames(difexp) <- OmicSignature::replaceDifexpCol(colnames(difexp))  # Create signature object signature <- difexp %>%   dplyr::filter(abs(score) > metadata$score_cutoff & adj_p < metadata$adj_p_cutoff) %>%   dplyr::select(probe_id, feature_name, score) %>%   dplyr::mutate(direction = ifelse(score > 0, \"+\", \"-\"))  # Create signature object  omic_signature <- OmicSignature::OmicSignature$new(   metadata = metadata,   signature = signature,   difexp = difexp ) #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m created. # Add signature to database SigRepo::addSignature(   conn_handler = conn_handler,        # A handler contains user credentials to establish connection to a remote database   omic_signature = omic_signature,    # An R6 object obtained from OmicSignature::OmicSignature()   return_signature_id = FALSE,        # Whether to return the uploaded signature id   verbose = TRUE                      # Whether to print diagnostic messages ) #> Uploading signature metadata into the database... #> Saving difexp to the database... #> now dyn.load(\"/usr/local/lib/R/site-library/curl/libs/curl.so\") ... #> Adding user to the signature access table of the database... #> Adding signature feature set to the database... #> Finished uploading. #> ID of the uploaded signature: 26"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"example-2-upload-omic_signature_ags_oms-signature","dir":"","previous_headings":"","what":"Example 2: Upload omic_signature_AGS_OmS signature","title":"SigRepo","text":"","code":"SigRepo::addSignature(   conn_handler = conn_handler,    omic_signature = omic_signature_AGS_OmS ) #>  You already uploaded a signature with the name = 'LLFS_Aging_Gene_2023' to the SigRepo Database. #>  ID of the uploaded signature: 3"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"example-3-upload-omic_signature_mda_cyp-signature","dir":"","previous_headings":"","what":"Example 3: Upload omic_signature_MDA_CYP signature","title":"SigRepo","text":"","code":"SigRepo::addSignature(   conn_handler = conn_handler,    omic_signature = omic_signature_MDA_CYP ) #> Uploading signature metadata into the database... #> Saving difexp to the database... #> Adding user to the signature access table of the database... #> Adding signature feature set to the database... #> Error in value[[3L]](cond): Error in SigRepo::showTranscriptomicsErrorMessage(db_table_name = ref_table, :  #> The following features do not existed in the 'transcriptomics_features' table of the database: #> 'ENSG00000281508' #> 'ENSG00000199900' #> 'ENSG00000247844' #> 'ENSG00000258777' #> 'ENSG00000230836' #> 'ENSG00000204282' #> 'ENSG00000179979' #> 'ENSG00000198384' #> 'ENSG00000277203' #> 'ENSG00000250889' #> 'ENSG00000170647' #> 'ENSG00000276797' #> 'ENSG00000237975' #> 'ENSG00000241990' #> 'ENSG00000155640' #> 'ENSG00000199404' #> 'ENSG00000230641' #> 'ENSG00000227895' #> 'ENSG00000150526' #> 'ENSG00000277555' #> 'ENSG00000274744' #> 'ENSG00000250588' #> 'ENSG00000223414' #> 'ENSG00000184258' #> 'ENSG00000228265' #> 'ENSG00000146521' #> 'ENSG00000232224' #> 'ENSG00000256045' #> 'ENSG00000240875' #> 'ENSG00000182584' #> 'ENSG00000239332' #> 'ENSG00000186354' #> 'ENSG00000200649' #> 'ENSG00000225163' #> 'ENSG00000255145' #> 'ENSG00000228439' #> 'ENSG00000201126' #> 'ENSG00000225986' #> 'ENSG00000238648' #> 'ENSG00000228393' #> 'ENSG00000112096' #> 'ENSG00000170590' #> 'ENSG00000269028' #> 'ENSG00000280524' #> 'ENSG00000238266' #> 'ENSG00000235825' #> 'ENSG00000243587' #> 'ENSG00000203441' #> 'ENSG00000207770' #> 'ENSG00000132832' #> 'ENSG00000236850' #> 'ENSG00000235884' #> 'ENSG00000249860' #> 'ENSG00000215271' #> 'ENSG00000256164' #> 'ENSG00000215067' #> 'ENSG00000223797' #> 'ENSG00000244349' #> 'ENSG00000208035' #> 'ENSG00000255090' #> 'ENSG00000242349' #> You can use 'searchFeature()' to see a list of available features in the database. #> To add these features to our database, please contact our admin for support."},{"path":"https://montilab.github.io/SigRepo/index.html","id":"search-for-a-list-of-signatures","dir":"","previous_headings":"","what":"Search for a list of signatures","title":"SigRepo","text":"searchSignature() function allows users search specific set signatures available database.","code":""},{"path":"https://montilab.github.io/SigRepo/index.html","id":"example-1-search-for-all-signatures","dir":"","previous_headings":"","what":"Example 1: Search for all signatures","title":"SigRepo","text":"","code":"signature_tbl <- SigRepo::searchSignature(conn_handler = conn_handler)  if(nrow(signature_tbl) > 0){   knitr::kable(     signature_tbl,      row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"example-2-search-for-a-specific-signature-eg-signature_name--llfs_aging_gene_2023","dir":"","previous_headings":"","what":"Example 2: Search for a specific signature, e.g., signature_name = “LLFS_Aging_Gene_2023”.","title":"SigRepo","text":"","code":"signature_tbl <- SigRepo::searchSignature(   conn_handler = conn_handler,    signature_name = \"LLFS_Aging_Gene_2023\" )  if(nrow(signature_tbl) > 0){   knitr::kable(     signature_tbl,      row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"retrieve-a-list-of-omic-signatures","dir":"","previous_headings":"","what":"Retrieve a list of omic signatures","title":"SigRepo","text":"getSignature() function allows users retrieve list omic signature objects previously uploaded database. IMPORTANT NOTE: user MUST editor admin access use function. Furthermore, user can RETRIEVE uploaded signatures given editor permission users database access signatures.","code":""},{"path":"https://montilab.github.io/SigRepo/index.html","id":"example-1-retrieve-all-signatures","dir":"","previous_headings":"","what":"Example 1: Retrieve all signatures","title":"SigRepo","text":"","code":"signature_list <- SigRepo::getSignature(conn_handler = conn_handler) #>   [Success] OmicSignature object LLFS_Aging_Gene_2023 created. #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m_v1 created. #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m_v2 created. #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m created."},{"path":"https://montilab.github.io/SigRepo/index.html","id":"example-2-retrieve-a-specific-signature-eg-signature_name--llfs_aging_gene_2023","dir":"","previous_headings":"","what":"Example 2: Retrieve a specific signature, e.g., signature_name = “LLFS_Aging_Gene_2023”","title":"SigRepo","text":"","code":"LLFS_oms <- SigRepo::getSignature(   conn_handler = conn_handler,    signature_name = \"LLFS_Aging_Gene_2023\" ) #>   [Success] OmicSignature object LLFS_Aging_Gene_2023 created."},{"path":"https://montilab.github.io/SigRepo/index.html","id":"update-a-signature","dir":"","previous_headings":"","what":"Update a signature","title":"SigRepo","text":"updateSignature() function allows users update specific signature SigRepo database. IMPORTANT NOTE: user MUST editor admin access use function. Furthermore, user can UPDATE uploaded signatures given editor permission users database access edit signatures. example: platform information previous uploaded signature, “Myc_reduce_mice_liver_24m”, incorrect, wish update platform information correct value, e.g., platform = “GPLXXXXX”. can use updateSignature() function follows: Now look signature_name = “Myc_reduce_mice_liver_24m” see value platform changed.","code":"# Revise the metadata object with new platform = GPLXXXXX metadata_revised <- base::list(   # required attributes:   signature_name = \"Myc_reduce_mice_liver_24m\",   organism = \"Mus Musculus\",   direction_type = \"bi-directional\",   assay_type = \"transcriptomics\",   phenotype = \"Myc_reduce\",      # optional and recommended:   covariates = \"none\",   description = \"mice MYC reduced expression\",   platform = \"GPLXXXXX\", # use GEO platform ID   sample_type = \"liver\", # use BRENDA ontology      # optional cut-off attributes.   # specifying them can facilitate the extraction of signatures.   logfc_cutoff = NULL,   p_value_cutoff = NULL,   adj_p_cutoff = 0.05,   score_cutoff = 5,      # other optional built-in attributes:   keywords = c(\"Myc\", \"KO\", \"longevity\"),   cutoff_description = NULL,   author = NULL,   PMID = 25619689,   year = 2015,      # example of customized attributes:   others = list(\"animal_strain\" = \"C57BL/6\") )  # Create difexp object difexp <- readRDS(file.path(system.file(\"extdata\", package = \"OmicSignature\"), \"difmatrix_Myc_mice_liver_24m.rds\")) %>% dplyr::rename(feature_name = ensembl) colnames(difexp) <- OmicSignature::replaceDifexpCol(colnames(difexp))  # Create signature object signature <- difexp %>%   dplyr::filter(abs(score) > metadata_revised$score_cutoff & adj_p < metadata_revised$adj_p_cutoff) %>%   dplyr::select(probe_id, feature_name, score) %>%   dplyr::mutate(direction = ifelse(score > 0, \"+\", \"-\"))  # Create the updated OmicSignature object updated_omic_signature <- OmicSignature::OmicSignature$new(   signature = signature,   metadata = metadata_revised,   difexp = difexp ) #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m created. # Now search for Myc_reduce_mice_liver_24m in the database # in which we would like to revise the value of platform to GPLXXXXX signature_tbl <- SigRepo::searchSignature(   conn_handler = conn_handler,    signature_name = metadata_revised$signature_name )  # Updating the signature with the revised omic_signature object if(nrow(signature_tbl) > 0){   SigRepo::updateSignature(     conn_handler = conn_handler,      signature_id = signature_tbl$signature_id,      omic_signature = updated_omic_signature   ) } #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m created. #>  signature_id = '26' has been updated. signature_tbl <- SigRepo::searchSignature(   conn_handler = conn_handler,    signature_name = \"Myc_reduce_mice_liver_24m\" )  if(nrow(signature_tbl) > 0){   knitr::kable(     signature_tbl,     row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"delete-a-signature","dir":"","previous_headings":"","what":"Delete a signature","title":"SigRepo","text":"deleteSignature() function allows users delete signature database. IMPORTANT NOTE: user MUST editor admin access use function. Furthermore, user can DELETE uploaded signatures given editor permission users access delete signatures. example: want remove signature_name = “Myc_reduce_mice_liver_24m” database.","code":"# Search for Myc_reduce_mice_liver_24m in the database and remove it signature_tbl <- SigRepo::searchSignature(   conn_handler = conn_handler,    signature_name = \"Myc_reduce_mice_liver_24m\" )  # Remove signature from the database if(nrow(signature_tbl) > 0){   SigRepo::deleteSignature(     conn_handler = conn_handler,      signature_id = signature_tbl$signature_id   ) } #> Remove signature_id = '26' from 'signatures' table of the database. #> Remove features belongs to signature_id = '26' from 'signature_feature_set' table of the database. #> Remove user access to signature_id = '26' from 'signature_access' table of the database. #> Remove signature_id = '26' from 'signature_collection_access' table of the database. #> signature_id = '26' has been removed."},{"path":"https://montilab.github.io/SigRepo/news/news-1.0.html","id":"sigrepo-100","dir":"News","previous_headings":"","what":"SigRepo 1.0.0","title":"Version 1.0","text":"Documentation: https://montilab.github.io/SigRepo/ GitHub: https://github.com/montilab/SigRepo/","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"addCollection — addCollection","title":"addCollection — addCollection","text":"Add signature collection database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addCollection — addCollection","text":"","code":"addCollection(   conn_handler,   omic_collection,   return_collection_id = FALSE,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/addCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addCollection — addCollection","text":"conn_handler established connection database using newConnhandler() omic_collection collection OmicSignature objects OmicSignature package return_collection_id logical value indicates whether return ID uploaded collection. Default FALSE. verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addKeyword.html","id":null,"dir":"Reference","previous_headings":"","what":"addKeyword — addKeyword","title":"addKeyword — addKeyword","text":"Add keywords database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addKeyword.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addKeyword — addKeyword","text":"","code":"addKeyword(conn_handler, keyword_tbl, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/addKeyword.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addKeyword — addKeyword","text":"conn_handler established connection database using newConnhandler() keyword_tbl data frame containing appropriate column names: keyword verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addOrganism.html","id":null,"dir":"Reference","previous_headings":"","what":"addOrganism — addOrganism","title":"addOrganism — addOrganism","text":"Add organism database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addOrganism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addOrganism — addOrganism","text":"","code":"addOrganism(conn_handler, organism_tbl, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/addOrganism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addOrganism — addOrganism","text":"conn_handler established connection database using newConnhandler() organism_tbl data frame object contains appropriate column names: organism verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addPhenotype.html","id":null,"dir":"Reference","previous_headings":"","what":"addPhenotype — addPhenotype","title":"addPhenotype — addPhenotype","text":"Add phenotype database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addPhenotype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addPhenotype — addPhenotype","text":"","code":"addPhenotype(conn_handler, phenotype_tbl, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/addPhenotype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addPhenotype — addPhenotype","text":"conn_handler established connection database using newConnhandler() phenotype_tbl data frame containing appropriate column names: phenotype verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addPlatform.html","id":null,"dir":"Reference","previous_headings":"","what":"addPlatform — addPlatform","title":"addPlatform — addPlatform","text":"Add platform database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addPlatform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addPlatform — addPlatform","text":"","code":"addPlatform(conn_handler, platform_tbl, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/addPlatform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addPlatform — addPlatform","text":"conn_handler established connection database using newConnhandler() platform_tbl data frame containing appropriate column names:  platform_id, platform_name, seq_technology, organisms uploaded  database. verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addRefFeatureSet.html","id":null,"dir":"Reference","previous_headings":"","what":"addRefFeatureSet — addRefFeatureSet","title":"addRefFeatureSet — addRefFeatureSet","text":"Add reference feature set database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addRefFeatureSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addRefFeatureSet — addRefFeatureSet","text":"","code":"addRefFeatureSet(   conn_handler,   assay_type = c(\"transcriptomics\", \"proteomics\", \"metabolomics\", \"methylomics\",     \"genetic_variations\", \"dna_binding_sites\"),   feature_set,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/addRefFeatureSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addRefFeatureSet — addRefFeatureSet","text":"conn_handler established connection database using newConnhandler() assay_type Type assays: transcriptomics, proteomics, metabolomics,  methylomics, genetic_variations, dna_binding_sites feature_set data frame containing appropriate column names verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addSampleType.html","id":null,"dir":"Reference","previous_headings":"","what":"addSampleType — addSampleType","title":"addSampleType — addSampleType","text":"Add sample_type database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addSampleType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addSampleType — addSampleType","text":"","code":"addSampleType(conn_handler, sample_type_tbl, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/addSampleType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addSampleType — addSampleType","text":"conn_handler established connection database using newConnhandler() sample_type_tbl data frame containing appropriate column names: sample_type, brenda_accession verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"addSignature — addSignature","title":"addSignature — addSignature","text":"Add signature database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addSignature — addSignature","text":"","code":"addSignature(   conn_handler,   omic_signature,   return_signature_id = FALSE,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/addSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addSignature — addSignature","text":"conn_handler established connection database using newConnhandler() omic_signature R6 class object OmicSignature package return_signature_id logical value indicates whether return ID uploaded signature. Default FALSE. verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addSignatureToCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"addSignatureToCollection — addSignatureToCollection","title":"addSignatureToCollection — addSignatureToCollection","text":"Add list signatures collection database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addSignatureToCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addSignatureToCollection — addSignatureToCollection","text":"","code":"addSignatureToCollection(   conn_handler,   collection_id,   signature_id,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/addSignatureToCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addSignatureToCollection — addSignatureToCollection","text":"conn_handler handler uses establish connection remote database obtained SigRepo::newConnhandler() collection_id ID collection database signature_id list signature IDs added collection  database verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addUser.html","id":null,"dir":"Reference","previous_headings":"","what":"addUser — addUser","title":"addUser — addUser","text":"Add user information database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addUser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addUser — addUser","text":"","code":"addUser(conn_handler, user_tbl, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/addUser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addUser — addUser","text":"conn_handler established database connection using SigRepo::newConnhandler() user_tbl data frame containing appropriate column names: user_name, user_password, user_email, user_first, user_last, user_affiliation, user_role #' @param verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addUserToCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"addUserToCollection — addUserToCollection","title":"addUserToCollection — addUserToCollection","text":"Add list users specific access collection  database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addUserToCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addUserToCollection — addUserToCollection","text":"","code":"addUserToCollection(   conn_handler,   collection_id,   user_name,   access_type = c(\"owner\", \"editor\", \"viewer\"),   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/addUserToCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addUserToCollection — addUserToCollection","text":"conn_handler handler uses establish connection remote database obtained SigRepo::newConnhandler() collection_id ID collection database user_name list users added collection access_type list permissions given users order  view manage collection database. three types permissions: owner Read Write access uploaded collection. editor Read Write access collection users  given access . viewer Read access collection users  given access . verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addUserToSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"addUserToSignature — addUserToSignature","title":"addUserToSignature — addUserToSignature","text":"Add list users specific access signature  database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addUserToSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addUserToSignature — addUserToSignature","text":"","code":"addUserToSignature(   conn_handler,   signature_id,   user_name,   access_type = c(\"owner\", \"editor\", \"viewer\"),   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/addUserToSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addUserToSignature — addUserToSignature","text":"conn_handler handler uses establish connection remote database obtained SigRepo::newConnhandler() signature_id ID signature database user_name list users added signature access_type list permissions given users order  view manage signature database. three types permissions: owner Read Write access uploaded signatures. editor Read Write access signatures users  given access . viewer Read access signatures users  given access . verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deleteCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"deleteCollection — deleteCollection","title":"deleteCollection — deleteCollection","text":"Delete signature signature table database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deleteCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deleteCollection — deleteCollection","text":"","code":"deleteCollection(conn_handler, collection_id, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/deleteCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deleteCollection — deleteCollection","text":"conn_handler established connection database using newConnhandler() collection_id name signature deleted database verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deleteCollection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"deleteCollection — deleteCollection","text":"","code":"# Create a db connection conn_handler <- SigRepo::newConnHandler(  dbname = \"sigrepo\",   host = \"montilab.bu.edu\",   port = 3306,   user = \"guest\",   password = \"guest\" )  # Get a list of signatures available in the database collection_tbl <- sigRepo::searchCollection(   conn_handler = conn_handler,   user_name = \"guest\" ) #> Error in loadNamespace(x): there is no package called ‘sigRepo’  # Delete signature from database (NOT RUN) # SigRepo::deleteCollection( #   conn_handler = conn_handler, #   collection_id = collection_tbl$collection_id[1] # )"},{"path":"https://montilab.github.io/SigRepo/reference/deleteSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"deleteSignature — deleteSignature","title":"deleteSignature — deleteSignature","text":"Delete signature signature table database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deleteSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deleteSignature — deleteSignature","text":"","code":"deleteSignature(conn_handler, signature_id, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/deleteSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deleteSignature — deleteSignature","text":"conn_handler established connection database using newConnhandler() signature_id ID signature removed database verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deleteUser.html","id":null,"dir":"Reference","previous_headings":"","what":"deleteUser — deleteUser","title":"deleteUser — deleteUser","text":"Delete user information database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deleteUser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deleteUser — deleteUser","text":"","code":"deleteUser(conn_handler, user_name, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/deleteUser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deleteUser — deleteUser","text":"conn_handler established database connection using SigRepo::newConnhandler() user_name Name user deleted (required). verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/delete_table_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"delete_table_sql — delete_table_sql","title":"delete_table_sql — delete_table_sql","text":"delete entry database table","code":""},{"path":"https://montilab.github.io/SigRepo/reference/delete_table_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"delete_table_sql — delete_table_sql","text":"","code":"delete_table_sql(   conn,   db_table_name,   delete_coln_var,   delete_coln_val,   check_db_table = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/delete_table_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"delete_table_sql — delete_table_sql","text":"conn established database connection using newConnhandler() db_table_name Name table database delete_coln_var column variable table removing rows delete_coln_val list values associated delete_coln_var removed. check_db_table whether check database table. Default = TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getAPIKey.html","id":null,"dir":"Reference","previous_headings":"","what":"getAPIKey — getAPIKey","title":"getAPIKey — getAPIKey","text":"Add API Key one users database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getAPIKey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getAPIKey — getAPIKey","text":"","code":"getAPIKey(conn_handler)"},{"path":"https://montilab.github.io/SigRepo/reference/getAPIKey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getAPIKey — getAPIKey","text":"conn_handler established database connection using newConnhandler()","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"getCollection — getCollection","title":"getCollection — getCollection","text":"Get list collection uploaded specified user database.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getCollection — getCollection","text":"","code":"getCollection(   conn_handler,   collection_name = NULL,   collection_id = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/getCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getCollection — getCollection","text":"conn_handler handler uses establish connection database  obtained SigRepo::newConnhandler() (required) collection_name Name collection returned verbose logical value indicates whether print diagnostic messages. Default TRUE. signature_id ID collection returned","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"getSignature — getSignature","title":"getSignature — getSignature","text":"Get list signatures uploaded specified user database.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getSignature — getSignature","text":"","code":"getSignature(   conn_handler,   signature_name = NULL,   signature_id = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/getSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getSignature — getSignature","text":"conn_handler handler uses establish connection database  obtained SigRepo::newConnhandler() (required) signature_name Name signatures returned signature_id ID signatures returned verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/lookup_table_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"lookup_table_sql — lookup_table_sql","title":"lookup_table_sql — lookup_table_sql","text":"Look list variables based particular variable  associated values database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/lookup_table_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lookup_table_sql — lookup_table_sql","text":"","code":"lookup_table_sql(   conn,   db_table_name,   return_var = \"*\",   filter_coln_var = NULL,   filter_coln_val = NULL,   filter_var_by = NULL,   check_db_table = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/lookup_table_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lookup_table_sql — lookup_table_sql","text":"conn established connection database using SigRepo::newConnhandler() db_table_name table database return_var list column variables returned given table.  Default '*' (means everything). filter_coln_var list column variables given table. Default NULL. filter_coln_val list values associated 'filter_coln_var' variables.  importantly, 'filter_coln_val' must names labels matched values 'filter_coln_var'. Default NULL. filter_var_by length(filter_coln_var) > 1, 'filter_var_by' must provided vector logical operators (e.g., /) n = length(filter_coln_var) - 1.  Default NULL. check_db_table Check whether table exists database. Default = TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/newConnHandler.html","id":null,"dir":"Reference","previous_headings":"","what":"newConnHandler — newConnHandler","title":"newConnHandler — newConnHandler","text":"Create handler connect remote database.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/newConnHandler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"newConnHandler — newConnHandler","text":"","code":"newConnHandler(   dbname = \"sigrepo\",   host = \"montilab.bu.edu\",   port = 3306,   api_port = 8020,   user = \"guest\",   password = \"guest\" )"},{"path":"https://montilab.github.io/SigRepo/reference/newConnHandler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"newConnHandler — newConnHandler","text":"dbname Name MySQL database point . host Name server MySQL database hosted . port Port server connect MySQL database. api_port Port server access database API. user Name user establish connection. password Password associated user.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/newConnHandler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"newConnHandler — newConnHandler","text":"list user credentials establish connection remote database.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://montilab.github.io/SigRepo/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/removeSignatureFromCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"removeSignatureFromCollection — removeSignatureFromCollection","title":"removeSignatureFromCollection — removeSignatureFromCollection","text":"Delete list signatures collection database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/removeSignatureFromCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"removeSignatureFromCollection — removeSignatureFromCollection","text":"","code":"removeSignatureFromCollection(   conn_handler,   collection_id,   signature_id,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/removeSignatureFromCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"removeSignatureFromCollection — removeSignatureFromCollection","text":"conn_handler handler uses establish connection remote database obtained SigRepo::newConnhandler() collection_id ID collection database signature_id list signature IDs removed collection  database verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"searchCollection — searchCollection","title":"searchCollection — searchCollection","text":"Get list collection available database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"searchCollection — searchCollection","text":"","code":"searchCollection(   conn_handler,   collection_name = NULL,   collection_id = NULL,   signature_name = NULL,   signature_id = NULL,   user_name = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/searchCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"searchCollection — searchCollection","text":"conn_handler handler uses establish connection database  obtained SigRepo::newConnhandler() (required) collection_name Name collection looked . collection_id ID collection looked . signature_name Name signatures looked . signature_id ID signatures looked . user_name Name users collection belongs . verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchCollection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"searchCollection — searchCollection","text":"","code":"# Create a db connection conn_handler <- SigRepo::newConnHandler(  dbname = \"sigrepo\",   host = \"montilab.bu.edu\",   port = 3306,   user = \"guest\",   password = \"guest\" )  # Get a list of collection available in the database collection_tbl <- sigRepo::searchCollection(   conn_handler = conn_handler ) #> Error in loadNamespace(x): there is no package called ‘sigRepo’"},{"path":"https://montilab.github.io/SigRepo/reference/searchFeature.html","id":null,"dir":"Reference","previous_headings":"","what":"searchFeature — searchFeature","title":"searchFeature — searchFeature","text":"Search list features based assay type database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchFeature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"searchFeature — searchFeature","text":"","code":"searchFeature(   conn_handler,   assay_type = c(\"transcriptomics\", \"proteomics\", \"metabolomics\", \"methylomics\",     \"genetic_variations\", \"dna_binding_sites\"),   feature_name = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/searchFeature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"searchFeature — searchFeature","text":"conn_handler handler uses establish connection database  obtained SigRepo::newConnhandler() (required) assay_type Type assays: transcriptomics, proteomics, metabolomics,  methylomics, genetic_variations, dna_binding_sites (required) feature_name list feature names look . verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchOrganism.html","id":null,"dir":"Reference","previous_headings":"","what":"searchOrganism — searchOrganism","title":"searchOrganism — searchOrganism","text":"Get organisms database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchOrganism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"searchOrganism — searchOrganism","text":"","code":"searchOrganism(conn_handler, organism = NULL, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/searchOrganism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"searchOrganism — searchOrganism","text":"conn_handler handler uses establish connection database  obtained SigRepo::newConnhandler() (required) organism list organisms search . Default NULL includes organisms database. verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchPhenotype.html","id":null,"dir":"Reference","previous_headings":"","what":"searchPhenotype — searchPhenotype","title":"searchPhenotype — searchPhenotype","text":"Get phenotypes database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchPhenotype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"searchPhenotype — searchPhenotype","text":"","code":"searchPhenotype(conn_handler, phenotype = NULL, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/searchPhenotype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"searchPhenotype — searchPhenotype","text":"conn_handler handler uses establish connection database  obtained SigRepo::newConnhandler() (required) verbose logical value indicates whether print diagnostic messages. Default TRUE. phenotypes list phenotypes search . Default NULL includes phenotypes database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchPlatform.html","id":null,"dir":"Reference","previous_headings":"","what":"searchPlatform — searchPlatform","title":"searchPlatform — searchPlatform","text":"Get signatures database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchPlatform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"searchPlatform — searchPlatform","text":"","code":"searchPlatform(conn_handler, platform_id = NULL, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/searchPlatform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"searchPlatform — searchPlatform","text":"conn_handler handler uses establish connection database  obtained SigRepo::newConnhandler() (required) platform_id list platform accession ids search . Default NULL includes platforms database. verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchSampleType.html","id":null,"dir":"Reference","previous_headings":"","what":"searchSampleType — searchSampleType","title":"searchSampleType — searchSampleType","text":"Get sample types database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchSampleType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"searchSampleType — searchSampleType","text":"","code":"searchSampleType(conn_handler, sample_type = NULL, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/searchSampleType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"searchSampleType — searchSampleType","text":"conn_handler handler uses establish connection database  obtained SigRepo::newConnhandler() (required) sample_type list sample types search . Default NULL includes sample types database. verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"searchSignature — searchSignature","title":"searchSignature — searchSignature","text":"Get list signatures available database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"searchSignature — searchSignature","text":"","code":"searchSignature(   conn_handler,   signature_id = NULL,   signature_name = NULL,   user_name = NULL,   organism = NULL,   phenotype = NULL,   sample_type = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/searchSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"searchSignature — searchSignature","text":"conn_handler handler uses establish connection database  obtained SigRepo::newConnhandler() (required) signature_id ID signatures looked . signature_name Name signatures looked . user_name name user looked . organism organism looked . phenotype phenotype looked . sample_type sample type looked . verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchSignature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"searchSignature — searchSignature","text":"","code":"# Create a db connection conn_handler <- SigRepo::newConnHandler(  dbname = \"sigrepo\",   host = \"montilab.bu.edu\",   port = 3306,   user = \"guest\",   password = \"guest\" )  # Get a list of signatures available in the database signature_tbl <- sigRepo::searchSignature(   conn_handler = conn_handler ) #> Error in loadNamespace(x): there is no package called ‘sigRepo’"},{"path":"https://montilab.github.io/SigRepo/reference/updateCollectionMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"updateCollectionMetadata — updateCollectionMetadata","title":"updateCollectionMetadata — updateCollectionMetadata","text":"Update metadata collection database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/updateCollectionMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"updateCollectionMetadata — updateCollectionMetadata","text":"","code":"updateCollectionMetadata(   conn_handler,   collection_id,   collection_name = NULL,   description = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/updateCollectionMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"updateCollectionMetadata — updateCollectionMetadata","text":"conn_handler handler uses establish connection remote database obtained SigRepo::newConnhandler() collection_id ID collection database updated. collection_name Name collection changed. description Description collection changed. verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/updateCollectionMetadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"updateCollectionMetadata — updateCollectionMetadata","text":"","code":"# Create a db connection conn_handler <- SigRepo::newConnHandler(  dbname = \"sigrepo\",   host = \"montilab.bu.edu\",   port = 3306,   user = \"guest\",   password = \"guest\" )"},{"path":"https://montilab.github.io/SigRepo/reference/updateSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"updateSignature — updateSignature","title":"updateSignature — updateSignature","text":"Update signature database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/updateSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"updateSignature — updateSignature","text":"","code":"updateSignature(conn_handler, signature_id, omic_signature, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/updateSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"updateSignature — updateSignature","text":"conn_handler established connection handler using SigRepo::newConnhandler() signature_id unique signature id database needs updated omic_signature R6 class object OmicSignature package verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/updateSignature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"updateSignature — updateSignature","text":"","code":"# Create a db connection conn_handler <- SigRepo::newConnHandler(  dbname = \"sigrepo\",   host = \"montilab.bu.edu\",   port = 3306,   user = \"guest\",   password = \"guest\" )  # Get a list of signatures that belongs to user = 'guest' signature_tbl <- SigRepo::searchSignature(  conn_handler = conn_handler,  user_name = \"guest\" ) #> Error in value[[3L]](cond): Error in .local(drv, ...): Failed to connect to database: Error: Can't connect to MySQL server on 'montilab.bu.edu:3306' (111) #>  #>   # Update the desired signature (NOT RUN) # SigRepo::updateSignature( #  conn_handler = conn_handler, #  signature_id = signature_tbl$signature_id, #  omic_signature = omic_signature  # )"},{"path":"https://montilab.github.io/SigRepo/reference/updateUser.html","id":null,"dir":"Reference","previous_headings":"","what":"updateUser — updateUser","title":"updateUser — updateUser","text":"Update user information database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/updateUser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"updateUser — updateUser","text":"","code":"updateUser(   conn_handler,   user_name,   password = NULL,   email = NULL,   first_name = NULL,   last_name = NULL,   affiliation = NULL,   role = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/updateUser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"updateUser — updateUser","text":"conn_handler established database connection using SigRepo::newConnhandler() user_name Name user updated (required). password Password user updated. Default NULL. email Email user updated. Default NULL. last_name Last name user updated. Default NULL. affiliation First name user updated. Default NULL. role Role user updated. Choices admin/editor/viewer. verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/validateUser.html","id":null,"dir":"Reference","previous_headings":"","what":"validateUser — validateUser","title":"validateUser — validateUser","text":"Validate user database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/validateUser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"validateUser — validateUser","text":"","code":"validateUser(conn_handler)"},{"path":"https://montilab.github.io/SigRepo/reference/validateUser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"validateUser — validateUser","text":"conn_handler handler uses establish connection remote database  obtained SigRepo::newConnhandler() (required)","code":""}]
