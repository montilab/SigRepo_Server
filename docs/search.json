[{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Upload Collection","text":"Using devtools package","code":"# Load devtools package library(devtools)  # Install SigRepo devtools::install_github(repo = 'montilab/SigRepo')  # Install OmicSignature devtools::install_github(repo = 'montilab/OmicSignature')"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load packages","title":"Upload Collection","text":"","code":"# Load tidyverse package library(tidyverse)  # Load SigRepo package library(SigRepo)  # Load OmicSignature package library(OmicSignature)"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"create-a-handler-to-connect-to-sigrepo-database","dir":"Articles","previous_headings":"","what":"Create a handler to connect to SigRepo Database","title":"Upload Collection","text":"","code":"# Create a connection handler conn_handler <- SigRepo::newConnHandler(   dbname = \"sigrepo\",    host = \"sigrepo.org\",    port = 3306,    user = \"montilab\",    password = \"sigrepo\" )"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"load-signatures","dir":"Articles","previous_headings":"","what":"Load signatures","title":"Upload Collection","text":", provided 4 signature objects came package demonstrations: omic_signature_1 (Myc_reduce_mice_liver_24m_v1) omic_signature_2 (Myc_reduce_mice_liver_24m_v2) omic_signature_3 (Myc_reduce_mice_liver_24m_v3) omic_signature_4 (Myc_reduce_mice_liver_24m_v4)","code":"# Read in the signature objects omic_signature_1 <- base::readRDS(base::file.path(base::system.file(\"inst/extdata\", package = \"SigRepo\"), \"omic_signature_1.RDS\")) omic_signature_2 <- base::readRDS(base::file.path(base::system.file(\"inst/extdata\", package = \"SigRepo\"), \"omic_signature_2.RDS\")) omic_signature_3 <- base::readRDS(base::file.path(base::system.file(\"inst/extdata\", package = \"SigRepo\"), \"omic_signature_3.RDS\")) omic_signature_4 <- base::readRDS(base::file.path(base::system.file(\"inst/extdata\", package = \"SigRepo\"), \"omic_signature_4.RDS\"))"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"create-an-omic-collection","dir":"Articles","previous_headings":"","what":"Create an omic collection","title":"Upload Collection","text":", create collection two signatures, omic_signature_1 omic_signature_1, provided . See ?OmicSignatureCollection() OmicSignature package details create omic collection object.","code":"# Create a metadata object for the collection metadata <- base::list(   \"collection_name\" = \"my_collection\",   \"description\" = \"An example of signature collection\" )  # Create an omic collection using OmicSignatureCollection() from OmicSignature package omic_collection <- OmicSignature::OmicSignatureCollection$new(   OmicSigList = base::list(omic_signature_1, omic_signature_2),   metadata = metadata ) #>   [Success] OmicSignature Collection my_collection created."},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"upload-a-collection-to-the-database","dir":"Articles","previous_headings":"","what":"Upload a collection to the database","title":"Upload Collection","text":"addCollection() function allows users upload collection database. IMPORTANT NOTE: user MUST editor admin account use function. collection MUST R6 object obtained OmicSignature::OmicSignatureCollection()","code":"SigRepo::addCollection(   conn_handler = conn_handler,        # A handler contains user credentials to establish connection to a remote database   omic_collection = omic_collection,  # An R6 object obtained from OmicSignature::OmicSignatureCollection()   visibility = FALSE,                 # Whether to make the collection public or private. Default is FALSE.   return_collection_id = FALSE,       # Whether to return the uploaded collection id. Default is FALSE.   verbose = TRUE                      # Whether to print diagnostic messages. Default is TRUE. ) #> Uploading each signature in the collection to the database... #> Uploading collection metadata to the database... #> Adding user to collection access table in the database... #> Adding signature to the collection access table of the database... #> Finished uploading. #> ID of the uploaded collection: 46"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"search-for-a-collection-in-the-database","dir":"Articles","previous_headings":"","what":"Search for a collection in the database","title":"Upload Collection","text":"searchCollection() function allows users retrieve collections available database.","code":""},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"example-1-search-for-all-collections","dir":"Articles","previous_headings":"Search for a collection in the database","what":"Example 1: Search for all collections","title":"Upload Collection","text":"","code":"collection_tbl_1 <- SigRepo::searchCollection(conn_handler = conn_handler)  if(nrow(collection_tbl_1) > 0){   knitr::kable(     collection_tbl_1,      row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"example-2-search-for-a-specific-collection-by-its-name-e-g--collection_name-my_collection-","dir":"Articles","previous_headings":"Search for a collection in the database","what":"Example 2: Search for a specific collection by its name, e.g., collection_name = “my_collection”.","title":"Upload Collection","text":"","code":"collection_tbl_2 <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\" )  if(nrow(collection_tbl_2) > 0){   knitr::kable(     collection_tbl_2,      row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"retrieve-a-set-of-collections-in-the-database","dir":"Articles","previous_headings":"","what":"Retrieve a set of collections in the database","title":"Upload Collection","text":"getCollection() function allows users retrieve set collections PUBLICLY available database. IMPORTANT NOTE: Users can RETRIEVE list collections publicly available database including uploaded collections. collection PRIVATE belongs user database, users need given editor permission owner access, retrieve, edit collections.","code":""},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"example-1-get-all-collections-that-are-publicly-available-in-the-database","dir":"Articles","previous_headings":"Retrieve a set of collections in the database","what":"Example 1: Get all collections that are publicly available in the database","title":"Upload Collection","text":"","code":"collection_list_1 <- SigRepo::getCollection(conn_handler = conn_handler) #> now dyn.load(\"/Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library/curl/libs/curl.so\") ... #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m_v1 created. #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m_v2 created. #>   [Success] OmicSignature Collection my_collection created."},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"example-2-get-a-specific-collection-that-is-publicly-available-or-owned-by-user-in-the-database-e-g--collection_name-my_collection","dir":"Articles","previous_headings":"Retrieve a set of collections in the database","what":"Example 2: Get a specific collection that is publicly available or owned by user in the database, e.g., collection_name = “my_collection”","title":"Upload Collection","text":"","code":"collection_list_2 <- SigRepo::getCollection(   conn_handler = conn_handler,   collection_name = \"my_collection\" ) #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m_v1 created. #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m_v2 created. #>   [Success] OmicSignature Collection my_collection created."},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"update-a-collection-metadata","dir":"Articles","previous_headings":"","what":"Update a collection metadata","title":"Upload Collection","text":"updateCollectionMetadata() function allows users update metadata information collection database. IMPORTANT NOTE: Users MUST editor admin account use function. Furthermore, users can UPDATE uploaded signatures given editor permission owner access, retrieve, edit collections. example, wish change description “my_collection” database “updated description.” can use updateCollectionMetadata() function follows: Now, let’s search my_collection database see description updated.","code":"# 1. Let's search for my_collection in the database collection_tbl <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\" )  # 2. If the collection exists, update it with the new description if(nrow(collection_tbl) > 0){   SigRepo::updateCollectionMetadata(     conn_handler = conn_handler,      collection_id = collection_tbl$collection_id,     description =  \"This is the updated description.\"    ) } #> collection_id = '46' has been updated. # Search for my_collection in the database collection_tbl <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\" )  # If the collection exists, output data table if(nrow(collection_tbl) > 0){   knitr::kable(     collection_tbl,     row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"add-signatures-to-an-existing-collection-in-the-database","dir":"Articles","previous_headings":"","what":"Add signatures to an existing collection in the database","title":"Upload Collection","text":"addSignatureToCollection() function allows users add set signatures existing collection database. IMPORTANT NOTE: Users MUST editor admin account use function. Furthermore, users can UPDATE uploaded signatures given editor permission owner access, retrieve, edit collections. example, wish create two new signatures (omic_signature_3, omic_signature_4) add “my_collection” database. Now, let’s search my_collection database see signature added collection.","code":"# 1. Add omic_signature_3 to the database signature_id_1 <- SigRepo::addSignature(   conn_handler = conn_handler,    omic_signature = omic_signature_3,   return_signature_id = TRUE,   verbose = FALSE )  # 2. Add omic_signature_4 to the database signature_id_2 <- SigRepo::addSignature(   conn_handler = conn_handler,    omic_signature = omic_signature_4,   return_signature_id = TRUE,   verbose = FALSE )  # 3. Search for my_collection in the database collection_tbl <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\",   verbose = FALSE )  # If both collection and signatures exist, add its signature ids to collection. if(nrow(collection_tbl) > 0 && length(signature_id_1) > 0 && length(signature_id_2) > 0){   SigRepo::addSignatureToCollection(     conn_handler = conn_handler,      collection_id = collection_tbl$collection_id,     signature_id =  c(signature_id_1, signature_id_2)   ) } collection_tbl <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\" )  if(nrow(collection_tbl) > 0){   knitr::kable(     collection_tbl,     row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"remove-a-list-of-signatures-from-a-collection-in-the-database","dir":"Articles","previous_headings":"","what":"Remove a list of signatures from a collection in the database","title":"Upload Collection","text":"removeSignatureFromCollection() function allows users remove list signatures collection database. IMPORTANT NOTE: Users MUST editor admin access use function. Furthermore, users can UPDATE uploaded signatures given editor permission owner access, retrieve, edit collections. example, wish remove Myc_reduce_mice_liver_24m_v1 “my_collection” database Now, let’s search my_collection database see signature removed collection.","code":"# 1. Lets' check if signature = Myc_reduce_mice_liver_24m_v1 is in my_collection collection_tbl <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\",   signature_name = \"Myc_reduce_mice_liver_24m_v1\" )  # 2. If signature collection combo exists, remove the signature. if(nrow(collection_tbl) > 0){   SigRepo::removeSignatureFromCollection(     conn_handler = conn_handler,      collection_id = collection_tbl$collection_id,     signature_id = collection_tbl$signature_id   ) } #> Removing signature_id = '69' from collection_id = '46' completed. collection_tbl <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\" )  if(nrow(collection_tbl) > 0){   knitr::kable(     collection_tbl,     row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/articles/collection-tutorials.html","id":"delete-the-whole-collection-from-the-database","dir":"Articles","previous_headings":"","what":"Delete the whole collection from the database","title":"Upload Collection","text":"deleteCollection() function allows users delete collection database. IMPORTANT NOTE: Users MUST editor admin account use function. Furthermore, users can DELETE uploaded collections given editor permission users database access delete collection. collection can REMOVED DELETED one time. Finally, let’s search my_collection database see collection removed.","code":"# 1. Search for my_collection in the database  collection_tbl <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\" )  # 2. If the collection exists, remove it from the database if(nrow(collection_tbl) > 0){   SigRepo::deleteCollection(     conn_handler = conn_handler,      collection_id = collection_tbl$collection_id   ) } #> Remove collection_id = '46' from 'collection' table of the database. #> Remove collection_id = '46' from 'collection_access' table of the database. #> Remove signatures belongs to collection_id = '46' from 'signature_collection_access' table of the database. #> collection_id = '46' has been removed. collection_tbl <- SigRepo::searchCollection(   conn_handler = conn_handler,    collection_name = \"my_collection\" ) #> There is no collection returned from the search parameters."},{"path":"https://montilab.github.io/SigRepo/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Reina Chau. Author, maintainer. Cameron Vicnaire. Author. Mengze Li. Author. Stefano Monti. Author.","code":""},{"path":"https://montilab.github.io/SigRepo/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chau R, Vicnaire C, Li M, Monti S (2025). SigRepo: Storing processing omic signatures. R package version 1.0.0, https://github.com/montilab/SigRepo/.","code":"@Manual{,   title = {SigRepo: Storing and processing omic signatures},   author = {Reina Chau and Cameron Vicnaire and Mengze Li and Stefano Monti},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/montilab/SigRepo/}, }"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"id_-sigrepo-an-r-package-for-storing-and-processing-omic-signatures","dir":"","previous_headings":"","what":"Storing and processing omic signatures","title":"Storing and processing omic signatures","text":"SigRepo package includes suite functions easily storing managing biological signatures constituents. Currently, Sigrepo capable storing, searching, retrieving signatures signature collections MySQL database choice. Interest setting-SigRepo database? See initiate MySQL database appropriate schema. order interact suite functions SigRepo package, input data must represent R6 object representation signatures signature collections, can created using proprietary package, OmicSignature. Click link information: Overview object structure Create OmicSignature (OmS) Create OmicSignatureCollection (OmSC) demonstrations, walk steps use SigRepo package store, retrieve, interact list signatures stored MySQL SigRepo Database.","code":""},{"path":"https://montilab.github.io/SigRepo/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Storing and processing omic signatures","text":"Using devtools package","code":"# Load devtools package library(devtools)  # Install SigRepo devtools::install_github(repo = 'montilab/SigRepo')  # Install OmicSignature devtools::install_github(repo = 'montilab/OmicSignature')  # Load tidyverse package library(tidyverse)  # Load SigRepo package library(SigRepo)  # Load OmicSignature package library(OmicSignature)"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"connect-to-sigrepo-database","dir":"","previous_headings":"","what":"Connect to SigRepo Database","title":"Storing and processing omic signatures","text":"adopt MySQL database structure efficiently storing, searching, retrieving biological signatures constituents. access signatures stored database, VISIT WEBSITE create account CONTACT US added. three types user accounts: - admin READ WRITE access signatures database. - editor READ WRITE access uploaded signatures database. - viewer READ access see list signatures publicly available database WRITE access database. valid account, connect SigRepo database, one can use newConnHandler() function create handler contains user credentials establish connection database.","code":"# Create a connection handler conn_handler <- SigRepo::newConnHandler(   dbname = \"sigrepo\",    host = \"sigrepo.org\",    port = 3306,    user = \"montilab\",    password = \"sigrepo\" )"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"load-signatures","dir":"","previous_headings":"","what":"Load Signatures","title":"Storing and processing omic signatures","text":", provide two signature objects comes package demonstrations: LLFS_Aging_Gene_2023 Myc_reduce_mice_liver_24m","code":""},{"path":"https://montilab.github.io/SigRepo/index.html","id":"upload-a-signature","dir":"","previous_headings":"","what":"Upload a signature","title":"Storing and processing omic signatures","text":"addSignature() function allows users upload signature database. IMPORTANT NOTE: User MUST editor admin account use function. signature MUST R6 object obtained OmicSignature::OmicSignature()","code":""},{"path":"https://montilab.github.io/SigRepo/index.html","id":"example-1-create-an-omic-signature-using-omicsignature-package-and-upload-to-the-database","dir":"","previous_headings":"","what":"Example 1: Create an omic signature using OmicSignature package and upload to the database","title":"Storing and processing omic signatures","text":"","code":"# Create an OmicSignature metadata metadata <- OmicSignature::createMetadata(   # required attributes:   signature_name = \"Myc_reduce_mice_liver_24m_readme\",   organism = \"Mus musculus\",   direction_type = \"bi-directional\",   assay_type = \"transcriptomics\",   phenotype = \"Myc_reduce\",    # optional and recommended:   covariates = \"none\",   description = \"mice Myc haploinsufficient (Myc(+/-))\",   platform = \"transcriptomics by array\",   sample_type = \"liver\", # use BRENDA ontology    # optional cut-off attributes.   # specifying them can facilitate the extraction of signatures.   logfc_cutoff = NULL,   p_value_cutoff = NULL,   adj_p_cutoff = 0.05,   score_cutoff = 5,    # other optional built-in attributes:   keywords = c(\"Myc\", \"KO\", \"longevity\"),   cutoff_description = NULL,   author = NULL,   PMID = 25619689,   year = 2015,    # example of customized attributes:   others = list(\"animal_strain\" = \"C57BL/6\") )  # Create difexp object difexp <- base::readRDS(base::file.path(base::system.file(\"extdata\", package = \"OmicSignature\"), \"difmatrix_Myc_mice_liver_24m.rds\"))  base::colnames(difexp) <- OmicSignature::replaceDifexpCol(base::colnames(difexp)) #> Warning in OmicSignature::replaceDifexpCol(base::colnames(difexp)): Required #> column for OmicSignature object difexp: feature_name, is not found in your #> input. This may cause problem when creating your OmicSignature object.  # Rename ensembl with feature name and add group label to difexp difexp <- difexp |>     dplyr::rename(feature_name = ensembl) |>    dplyr::mutate(group_label = base::as.factor(base::ifelse(.data$score > 0, \"MYC Reduce\", \"WT\")))  # Create signature object signature <- difexp |>   dplyr::filter(base::abs(.data$score) > metadata$score_cutoff & .data$adj_p < metadata$adj_p_cutoff) |>   dplyr::select(c(\"probe_id\", \"feature_name\", \"score\")) |>   dplyr::mutate(group_label = base::as.factor(base::ifelse(.data$score > 0, \"MYC Reduce\", \"WT\")))  # Create signature object  omic_signature <- OmicSignature::OmicSignature$new(   metadata = metadata,   signature = signature,   difexp = difexp ) #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m_readme created.  # Add signature to database SigRepo::addSignature(   conn_handler = conn_handler,        # A handler contains user credentials to establish connection to a remote database   omic_signature = omic_signature,    # An R6 object obtained from OmicSignature::OmicSignature()   visibility = FALSE,                 # Whether to make signature public or private. Default is FALSE.   return_signature_id = FALSE,        # Whether to return the uploaded signature id. Default is FALSE.   verbose = TRUE                      # Whether to print diagnostic messages. Default is TRUE. ) #> Uploading signature metadata to the database... #> Saving difexp to the database... #> now dyn.load(\"/Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library/curl/libs/curl.so\") ... #> Adding user to the signature access table of the database... #> Adding signature feature set to the database... #> Finished uploading. #> ID of the uploaded signature: 95"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"example-2-upload-llfs_aging_gene_2023-signature","dir":"","previous_headings":"","what":"Example 2: Upload LLFS_Aging_Gene_2023 signature","title":"Storing and processing omic signatures","text":"","code":"SigRepo::addSignature(   conn_handler = conn_handler,    omic_signature = LLFS_Aging_Gene_2023 ) #> Uploading signature metadata to the database... #> Saving difexp to the database... #> Adding user to the signature access table of the database... #> Adding signature feature set to the database... #> Finished uploading. #> ID of the uploaded signature: 96"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"example-3-upload-myc_reduce_mice_liver_24m-signature","dir":"","previous_headings":"","what":"Example 3: Upload Myc_reduce_mice_liver_24m signature","title":"Storing and processing omic signatures","text":"","code":"missing_features <- SigRepo::addSignature(   conn_handler = conn_handler,    omic_signature = Myc_reduce_mice_liver_24m,   return_missing_features = TRUE       # Whether to return a list of missing features during upload. ) #> Uploading signature metadata to the database... #> Saving difexp to the database... #> Adding user to the signature access table of the database... #> Adding signature feature set to the database... #> Warning in SigRepo::showTranscriptomicsErrorMessage(db_table_name = ref_table, :  #> The following features do not existed in the 'transcriptomics_features' table of the database: #> 'ENSG00000213949' #> 'ENSG00000127946' #> 'ENSG00000159167' #> 'ENSG00000111335' #> 'ENSG00000033327' #> 'ENSG00000266472' #> 'ENSG00000088280' #> 'ENSG00000074935' #> 'ENSG00000205318' #> 'ENSG00000145781' #> 'ENSG00000182158' #> 'ENSG00000275183' #> 'ENSG00000137876' #> 'ENSG00000135069' #> 'ENSG00000108582' #> 'ENSG00000165312' #> 'ENSG00000135205' #> 'ENSG00000151726' #> 'ENSG00000197879' #> 'ENSG00000154310' #> 'ENSG00000116016' #> 'ENSG00000082781' #> 'ENSG00000141258' #> 'ENSG00000107833' #> 'ENSG00000102858' #> 'ENSG00000182054' #> 'ENSG00000167106' #> 'ENSG00000100196' #> 'ENSG00000150347' #> 'ENSG00000123977' #> 'ENSG00000143553' #> 'ENSG00000182704' #> 'ENSG00000134909' #> 'ENSG00000139725' #> 'ENSG00000170542' #> 'ENSG00000041982' #> 'ENSG00000162511' #> 'ENSG00000134243' #> 'ENSG00000095383' #> 'ENSG00000198925' #> 'ENSG00000163872' #> 'ENSG00000180891' #> 'ENSG00000126368' #> 'ENSG00000014914' #> 'ENSG00000186104' #> 'ENSG00000109472' #> 'ENSG00000196924' #> 'ENSG00000100605' #> 'ENSG00000113070' #> 'ENSG00000145431' #> 'ENSG00000167272' #> 'ENSG00000100280' #> 'ENSG00000182518' #> 'ENSG00000155363' #> 'ENSG00000213445' #> 'ENSG00000272620' #> 'ENSG00000179941' #> 'ENSG00000108561' #> 'ENSG00000005100' #> 'ENSG00000117616' #> 'ENSG00000161642' #> 'ENSG00000196981' #> 'ENSG00000125434' #> 'ENSG00000140937' #> 'ENSG00000105287' #> 'ENSG00000080561' #> 'ENSG00000163932' #> 'ENSG00000106399' #> 'ENSG00000085185' #> 'ENSG00000171298' #> 'ENSG00000120333' #> 'ENSG00000111875' #> 'ENSG00000165507' #> 'ENSG00000166797' #> 'ENSG00000103404' #> 'ENSG00000268043' #> 'ENSG00000265972' #> 'ENSG00000137494' #> 'ENSG00000107485' #> 'ENSG00000106397' #> 'ENSG00000252623' #> 'ENSG00000177084' #> 'ENSG00000155189' #> 'ENSG00000205189' #> 'ENSG00000000419' #> 'ENSG00000168275' #> 'ENSG00000144674' #> 'ENSG00000107263' #> 'ENSG00000113083' #> 'ENSG00000198873' #> 'ENSG00000164347' #> 'ENSG00000065526' #> 'ENSG00000153294' #> 'ENSG00000226742' #> 'ENSG00000163617' #> 'ENSG00000070047' #> 'ENSG00000134330' #> 'ENSG00000201962' #> 'ENSG00000168538' #> 'ENSG00000158042' #> 'ENSG00000160072' #> 'ENSG00000181634' #> 'ENSG00000145022' #> 'ENSG00000128510' #> 'ENSG00000125037' #> 'ENSG00000238357' #> 'ENSG00000077157' #> 'ENSG00000185989' #>  #> You can use 'searchTranscriptomicsFeatureSet()' to see a list of available features. #>  #> To add these features to our database, please contact our admin for support."},{"path":"https://montilab.github.io/SigRepo/index.html","id":"search-for-a-list-of-signatures","dir":"","previous_headings":"","what":"Search for a list of signatures","title":"Storing and processing omic signatures","text":"searchSignature() function allows users search specific set signatures available database.","code":""},{"path":"https://montilab.github.io/SigRepo/index.html","id":"example-1-search-for-all-signatures","dir":"","previous_headings":"","what":"Example 1: Search for all signatures","title":"Storing and processing omic signatures","text":"","code":"signature_tbl <- SigRepo::searchSignature(conn_handler = conn_handler)  if(nrow(signature_tbl) > 0){   knitr::kable(     signature_tbl,      row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"example-2-search-for-a-specific-signature-eg-signature_name--llfs_aging_gene_2023","dir":"","previous_headings":"","what":"Example 2: Search for a specific signature, e.g., signature_name = “LLFS_Aging_Gene_2023”","title":"Storing and processing omic signatures","text":"","code":"signature_tbl <- SigRepo::searchSignature(   conn_handler = conn_handler,    signature_name = \"LLFS_Aging_Gene_2023\" )  if(nrow(signature_tbl) > 0){   knitr::kable(     signature_tbl,      row.names = FALSE   ) }"},{"path":"https://montilab.github.io/SigRepo/index.html","id":"retrieve-a-list-of-omic-signatures","dir":"","previous_headings":"","what":"Retrieve a list of omic signatures","title":"Storing and processing omic signatures","text":"getSignature() function allows users retrieve list omic signature objects PUBLICLY available database. IMPORTANT NOTE: Users can RETRIEVE list signatures publicly available database including uploaded signatures. signature PRIVATE belongs user database, users need given editor permission owner order access, retrieve, edit signatures.","code":""},{"path":"https://montilab.github.io/SigRepo/index.html","id":"example-1-retrieve-all-signatures-that-are-publicly-available-or-owned-by-the-user-in-the-database","dir":"","previous_headings":"","what":"Example 1: Retrieve all signatures that are publicly available or owned by the user in the database","title":"Storing and processing omic signatures","text":"","code":"signature_list <- SigRepo::getSignature(conn_handler = conn_handler) #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m_v1 created. #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m_v2 created. #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m_v3 created. #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m_v4 created. #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m_readme created. #>   [Success] OmicSignature object LLFS_Aging_Gene_2023 created."},{"path":"https://montilab.github.io/SigRepo/index.html","id":"example-2-retrieve-a-specific-signature-that-is-publicly-available-or-owned-by-the-user-in-the-database-eg-signature_name--llfs_aging_gene_2023","dir":"","previous_headings":"","what":"Example 2: Retrieve a specific signature that is publicly available or owned by the user in the database, e.g., signature_name = “LLFS_Aging_Gene_2023”","title":"Storing and processing omic signatures","text":"","code":"LLFS_oms <- SigRepo::getSignature(   conn_handler = conn_handler,    signature_name = \"LLFS_Aging_Gene_2023\" ) #>   [Success] OmicSignature object LLFS_Aging_Gene_2023 created."},{"path":"https://montilab.github.io/SigRepo/index.html","id":"delete-a-signature","dir":"","previous_headings":"","what":"Delete a signature","title":"Storing and processing omic signatures","text":"deleteSignature() function allows users delete signature database. IMPORTANT NOTE: Users MUST editor admin account use function. Users can DELETE uploaded signatures given editor permission owner access, retrieve, edit signatures. Users can DELETE signature one time. example: want remove signature_name = “LLFS_Aging_Gene_2023” database.","code":"# Let's search for signature_name = \"LLFS_Aging_Gene_2023\" in the database signature_tbl <- SigRepo::searchSignature(   conn_handler = conn_handler,    signature_name = \"LLFS_Aging_Gene_2023\" )  # If the signature exists, remove it from the database if(nrow(signature_tbl) > 0){   SigRepo::deleteSignature(     conn_handler = conn_handler,      signature_id = signature_tbl$signature_id     ) } #> Remove signature_id = '96' from 'signatures' table of the database. #> Remove features belongs to signature_id = '96' from 'signature_feature_set' table of the database. #> Remove user access to signature_id = '96' from 'signature_access' table of the database. #> Remove signature_id = '96' from 'signature_collection_access' table of the database. #> signature_id = '96' has been removed."},{"path":"https://montilab.github.io/SigRepo/index.html","id":"update-a-signature","dir":"","previous_headings":"","what":"Update a signature","title":"Storing and processing omic signatures","text":"updateSignature() function allows users update specific signature SigRepo database. IMPORTANT NOTE: Users MUST editor admin account use function. Users can UPDATE uploaded signatures given editor permission owner access, retrieve, edit signatures. Users can UPDATE signature one time. example: platform information previous uploaded signature, “Myc_reduce_mice_liver_24m_readme”, incorrect, wish update platform information correct value, e.g., platform = “transcriptomics single-cell RNA-seq”. can use updateSignature() function follows: Let’s look signature_name = “Myc_reduce_mice_liver_24m_readme” see value platform changed. Finally, remove signature_name = “Myc_reduce_mice_liver_24m_readme” database","code":"# 1. Revise the metadata object with new platform = transcriptomics by single-cell RNA-seq metadata_revised <- OmicSignature::createMetadata(   # required attributes:   signature_name = \"Myc_reduce_mice_liver_24m_readme\",   organism = \"Mus musculus\",   direction_type = \"bi-directional\",   assay_type = \"transcriptomics\",   phenotype = \"Myc_reduce\",    # optional and recommended:   covariates = \"none\",   description = \"mice Myc haploinsufficient (Myc(+/-))\",   platform = \"transcriptomics by single-cell RNA-seq\",   sample_type = \"liver\", # use BRENDA ontology    # optional cut-off attributes.   # specifying them can facilitate the extraction of signatures.   logfc_cutoff = NULL,   p_value_cutoff = NULL,   adj_p_cutoff = 0.05,   score_cutoff = 5,    # other optional built-in attributes:   keywords = c(\"Myc\", \"KO\", \"longevity\"),   cutoff_description = NULL,   author = NULL,   PMID = 25619689,   year = 2015,    # example of customized attributes:   others = list(\"animal_strain\" = \"C57BL/6\") )  # Create difexp object difexp <- base::readRDS(base::file.path(base::system.file(\"extdata\", package = \"OmicSignature\"), \"difmatrix_Myc_mice_liver_24m.rds\"))  base::colnames(difexp) <- OmicSignature::replaceDifexpCol(base::colnames(difexp)) #> Warning in OmicSignature::replaceDifexpCol(base::colnames(difexp)): Required #> column for OmicSignature object difexp: feature_name, is not found in your #> input. This may cause problem when creating your OmicSignature object.  # Rename ensembl with feature name and add group label to difexp difexp <- difexp |>     dplyr::rename(feature_name = ensembl) |>    dplyr::mutate(group_label = base::as.factor(base::ifelse(.data$score > 0, \"MYC Reduce\", \"WT\")))  # Create signature object signature <- difexp |>   dplyr::filter(base::abs(.data$score) > metadata$score_cutoff & .data$adj_p < metadata$adj_p_cutoff) |>   dplyr::select(c(\"probe_id\", \"feature_name\", \"score\")) |>   dplyr::mutate(group_label = base::as.factor(base::ifelse(.data$score > 0, \"MYC Reduce\", \"WT\")))  # Create signature object  updated_omic_signature <- OmicSignature::OmicSignature$new(   metadata = metadata_revised,   signature = signature,   difexp = difexp ) #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m_readme created. # Now, let's search for Myc_reduce_mice_liver_24m_readme in the database # in which we would like to revise the value of platform to 'transcriptomics by single-cell RNA-seq' signature_tbl <- SigRepo::searchSignature(   conn_handler = conn_handler,    signature_name = metadata_revised$signature_name )  # If signature exists, update the signature with the revised omic_signature object if(base::nrow(signature_tbl) > 0){   SigRepo::updateSignature(     conn_handler = conn_handler,      signature_id = signature_tbl$signature_id,      omic_signature = updated_omic_signature   ) } #>   [Success] OmicSignature object Myc_reduce_mice_liver_24m_readme created. #>  signature_id = '95' has been updated. signature_tbl <- SigRepo::searchSignature(   conn_handler = conn_handler,    signature_name = \"Myc_reduce_mice_liver_24m_readme\" )  if(base::nrow(signature_tbl) > 0){   knitr::kable(     signature_tbl,     row.names = FALSE   ) } # Let's search for signature_name = \"Myc_reduce_mice_liver_24m_readme\" in the database signature_tbl <- SigRepo::searchSignature(   conn_handler = conn_handler,    signature_name = \"Myc_reduce_mice_liver_24m_readme\" )  # If the signature exists, remove it from the database if(nrow(signature_tbl) > 0){   SigRepo::deleteSignature(     conn_handler = conn_handler,      signature_id = signature_tbl$signature_id   ) } #> Remove signature_id = '95' from 'signatures' table of the database. #> Remove features belongs to signature_id = '95' from 'signature_feature_set' table of the database. #> Remove user access to signature_id = '95' from 'signature_access' table of the database. #> Remove signature_id = '95' from 'signature_collection_access' table of the database. #> signature_id = '95' has been removed."},{"path":"https://montilab.github.io/SigRepo/index.html","id":"additional-guides","dir":"","previous_headings":"","what":"Additional Guides","title":"Storing and processing omic signatures","text":"Upload signature collection SigRepo database","code":""},{"path":"https://montilab.github.io/SigRepo/news/news-1.0.html","id":"sigrepo-100","dir":"News","previous_headings":"","what":"SigRepo 1.0.0","title":"Version 1.0","text":"Documentation: https://montilab.github.io/SigRepo/ GitHub: https://github.com/montilab/SigRepo/","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"addCollection — addCollection","title":"addCollection — addCollection","text":"Add signature collections database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addCollection — addCollection","text":"","code":"addCollection(   conn_handler,   omic_collection,   visibility = FALSE,   return_collection_id = FALSE,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/addCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addCollection — addCollection","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) omic_collection collection OmicSignature objects OmicSignature package (required) visibility logical value indicates whether allow others view access one's uploaded collection. Default FALSE. return_collection_id logical value indicates whether return ID uploaded collection. Default FALSE. verbose logical value indicates whether print diagnostic messages. Default TRUE. #test","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addKeyword.html","id":null,"dir":"Reference","previous_headings":"","what":"addKeyword — addKeyword","title":"addKeyword — addKeyword","text":"Add keywords database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addKeyword.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addKeyword — addKeyword","text":"","code":"addKeyword(conn_handler, keyword_tbl, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/addKeyword.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addKeyword — addKeyword","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) keyword_tbl data frame containing appropriate column names: keyword (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addOrganism.html","id":null,"dir":"Reference","previous_headings":"","what":"addOrganism — addOrganism","title":"addOrganism — addOrganism","text":"Add organisms database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addOrganism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addOrganism — addOrganism","text":"","code":"addOrganism(conn_handler, organism_tbl, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/addOrganism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addOrganism — addOrganism","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) organism_tbl data frame object contains appropriate column names: organism (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addPhenotype.html","id":null,"dir":"Reference","previous_headings":"","what":"addPhenotype — addPhenotype","title":"addPhenotype — addPhenotype","text":"Add phenotypes database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addPhenotype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addPhenotype — addPhenotype","text":"","code":"addPhenotype(conn_handler, phenotype_tbl, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/addPhenotype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addPhenotype — addPhenotype","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) phenotype_tbl data frame containing appropriate column names: phenotype (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addPlatform.html","id":null,"dir":"Reference","previous_headings":"","what":"addPlatform — addPlatform","title":"addPlatform — addPlatform","text":"Add platforms database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addPlatform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addPlatform — addPlatform","text":"","code":"addPlatform(conn_handler, platform_tbl, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/addPlatform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addPlatform — addPlatform","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) platform_tbl data frame containing appropriate column names: platform_name (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addProteomicsFeatureSet.html","id":null,"dir":"Reference","previous_headings":"","what":"addProteomicsFeatureSet — addProteomicsFeatureSet","title":"addProteomicsFeatureSet — addProteomicsFeatureSet","text":"Add proteomics feature set database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addProteomicsFeatureSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addProteomicsFeatureSet — addProteomicsFeatureSet","text":"","code":"addProteomicsFeatureSet(conn_handler, feature_set, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/addProteomicsFeatureSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addProteomicsFeatureSet — addProteomicsFeatureSet","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) feature_set data frame containing appropriate column names: feature_name, organism, gene_symbol, is_current, version (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addProteomicsSignatureSet.html","id":null,"dir":"Reference","previous_headings":"","what":"addProteomicsSignatureSet — addProteomicsSignatureSet","title":"addProteomicsSignatureSet — addProteomicsSignatureSet","text":"Add proteomics signature feature set database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addProteomicsSignatureSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addProteomicsSignatureSet — addProteomicsSignatureSet","text":"","code":"addProteomicsSignatureSet(   conn_handler,   signature_id,   organism_id,   signature_set,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/addProteomicsSignatureSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addProteomicsSignatureSet — addProteomicsSignatureSet","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) signature_id ID signature (required) organism_id ID organism (required) signature_set data frame containing appropriate column names: feature_name, probe_id, score, group_label (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addRefFeatureSet.html","id":null,"dir":"Reference","previous_headings":"","what":"addRefFeatureSet — addRefFeatureSet","title":"addRefFeatureSet — addRefFeatureSet","text":"Add reference feature set database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addRefFeatureSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addRefFeatureSet — addRefFeatureSet","text":"","code":"addRefFeatureSet(   conn_handler,   assay_type = c(\"transcriptomics\", \"proteomics\", \"metabolomics\", \"methylomics\",     \"genetic_variations\", \"dna_binding_sites\"),   feature_set,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/addRefFeatureSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addRefFeatureSet — addRefFeatureSet","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) assay_type Type assays: transcriptomics, proteomics, metabolomics, methylomics, genetic_variations, dna_binding_sites (required) feature_set data frame containing appropriate column names (required): transcriptomics: feature_name, organism, gene_symbol, is_current, version proteomics: feature_name, organism, gene_symbol, is_current, version verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addSampleType.html","id":null,"dir":"Reference","previous_headings":"","what":"addSampleType — addSampleType","title":"addSampleType — addSampleType","text":"Add sample types database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addSampleType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addSampleType — addSampleType","text":"","code":"addSampleType(conn_handler, sample_type_tbl, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/addSampleType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addSampleType — addSampleType","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) sample_type_tbl data frame containing appropriate column names: sample_type, brenda_accession (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"addSignature — addSignature","title":"addSignature — addSignature","text":"Add signature database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addSignature — addSignature","text":"","code":"addSignature(   conn_handler,   omic_signature,   visibility = FALSE,   return_signature_id = FALSE,   return_missing_features = FALSE,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/addSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addSignature — addSignature","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) omic_signature R6 class object OmicSignature package (required) visibility logical value indicates whether allow others view access one's uploaded signature. Default FALSE. return_signature_id logical value indicates whether return ID uploaded signature. Default FALSE. return_missing_features logical value indicates whether return list features exist database. Default FALSE. verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addSignatureToCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"addSignatureToCollection — addSignatureToCollection","title":"addSignatureToCollection — addSignatureToCollection","text":"Add list signatures collection database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addSignatureToCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addSignatureToCollection — addSignatureToCollection","text":"","code":"addSignatureToCollection(   conn_handler,   collection_id,   signature_id,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/addSignatureToCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addSignatureToCollection — addSignatureToCollection","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) collection_id ID collection database (required) signature_id list signature IDs added collection database (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addSignatureWithID.html","id":null,"dir":"Reference","previous_headings":"","what":"addSignatureWithID — addSignatureWithID","title":"addSignatureWithID — addSignatureWithID","text":"Add signature database assigned ID","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addSignatureWithID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addSignatureWithID — addSignatureWithID","text":"","code":"addSignatureWithID(   conn_handler,   omic_signature,   assign_signature_id,   assign_user_name,   visibility = FALSE,   verbose = FALSE )"},{"path":"https://montilab.github.io/SigRepo/reference/addSignatureWithID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addSignatureWithID — addSignatureWithID","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) omic_signature R6 class object OmicSignature package (required) assign_signature_id Assign unique ID uploaded signature (required) assign_user_name Assign unique user name uploaded signature (required) visibility logical value indicates whether allow others view access one's uploaded signature. Default FALSE. verbose logical value indicates whether print diagnostic messages. Default FALSE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addTranscriptomicsFeatureSet.html","id":null,"dir":"Reference","previous_headings":"","what":"addTranscriptomicsFeatureSet — addTranscriptomicsFeatureSet","title":"addTranscriptomicsFeatureSet — addTranscriptomicsFeatureSet","text":"Add Transcriptomics Feature Set database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addTranscriptomicsFeatureSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addTranscriptomicsFeatureSet — addTranscriptomicsFeatureSet","text":"","code":"addTranscriptomicsFeatureSet(conn_handler, feature_set, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/addTranscriptomicsFeatureSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addTranscriptomicsFeatureSet — addTranscriptomicsFeatureSet","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) feature_set data frame containing appropriate column names: feature_name, organism, gene_symbol, is_current, version (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addTranscriptomicsSignatureSet.html","id":null,"dir":"Reference","previous_headings":"","what":"addTranscriptomicsSignatureSet — addTranscriptomicsSignatureSet","title":"addTranscriptomicsSignatureSet — addTranscriptomicsSignatureSet","text":"Add signature feature set database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addTranscriptomicsSignatureSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addTranscriptomicsSignatureSet — addTranscriptomicsSignatureSet","text":"","code":"addTranscriptomicsSignatureSet(   conn_handler,   signature_id,   organism_id,   signature_set,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/addTranscriptomicsSignatureSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addTranscriptomicsSignatureSet — addTranscriptomicsSignatureSet","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) signature_id ID signature (required) organism_id ID organism (required) signature_set data frame containing appropriate column names: feature_name, probe_id, score, group_label (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addUser.html","id":null,"dir":"Reference","previous_headings":"","what":"addUser — addUser","title":"addUser — addUser","text":"Add list users database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addUser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addUser — addUser","text":"","code":"addUser(conn_handler, user_tbl, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/addUser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addUser — addUser","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) user_tbl data frame containing appropriate column names: user_name, user_password, user_email, user_first, user_last, user_affiliation, user_role, active (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addUserToCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"addUserToCollection — addUserToCollection","title":"addUserToCollection — addUserToCollection","text":"Add list users specific access collection database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addUserToCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addUserToCollection — addUserToCollection","text":"","code":"addUserToCollection(   conn_handler,   collection_id,   user_name,   access_type = c(\"owner\", \"editor\", \"viewer\"),   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/addUserToCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addUserToCollection — addUserToCollection","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) collection_id ID collection database (required) user_name list users added collection (required) access_type list permissions given users order view manage collection database (required) . three types permissions: owner Read Write access uploaded collection. editor Read Write access collection users given access . viewer Read access collection users given access . verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addUserToSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"addUserToSignature — addUserToSignature","title":"addUserToSignature — addUserToSignature","text":"Add list users specific access signature database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/addUserToSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addUserToSignature — addUserToSignature","text":"","code":"addUserToSignature(   conn_handler,   signature_id,   user_name,   access_type = c(\"owner\", \"editor\", \"viewer\"),   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/addUserToSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addUserToSignature — addUserToSignature","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) signature_id ID signature database (required) user_name list users added signature (required) access_type list permissions given users order view manage signature database (required). three types permissions: owner Read Write access uploaded signatures. editor Read Write access signatures users given access . viewer Read access signatures users given access . verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/checkDBTable.html","id":null,"dir":"Reference","previous_headings":"","what":"checkDBTable — checkDBTable","title":"checkDBTable — checkDBTable","text":"Check api key whether valid access database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/checkDBTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkDBTable — checkDBTable","text":"","code":"checkDBTable(conn, db_table_name, check = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/checkDBTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkDBTable — checkDBTable","text":"conn established connection database using SigRepo::newConnhandler() db_table_name Name table database check Check whether table exists database. Default = TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/checkDuplicatedEmails.html","id":null,"dir":"Reference","previous_headings":"","what":"checkDuplicatedEmails — checkDuplicatedEmails","title":"checkDuplicatedEmails — checkDuplicatedEmails","text":"Check provided user table duplicated emails.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/checkDuplicatedEmails.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkDuplicatedEmails — checkDuplicatedEmails","text":"","code":"checkDuplicatedEmails(   conn,   db_table_name = \"users\",   table,   coln_var = \"user_email\",   check_db_table = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/checkDuplicatedEmails.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkDuplicatedEmails — checkDuplicatedEmails","text":"conn established connection database using newConnhandler() db_table_name Name table database table data frame object coln_var list column names excluded check. check_db_table Check whether table exists database. Default = TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/checkOmicCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"checkOmicCollection — checkOmicCollection","title":"checkOmicCollection — checkOmicCollection","text":"Check omic_signature valid R6 object","code":""},{"path":"https://montilab.github.io/SigRepo/reference/checkOmicCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkOmicCollection — checkOmicCollection","text":"","code":"checkOmicCollection(omic_collection)"},{"path":"https://montilab.github.io/SigRepo/reference/checkOmicCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkOmicCollection — checkOmicCollection","text":"omic_collection OmicSignatureCollection object OmicSignature package","code":""},{"path":"https://montilab.github.io/SigRepo/reference/checkOmicSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"checkOmicSignature — checkOmicSignature","title":"checkOmicSignature — checkOmicSignature","text":"Check omic_signature valid R6 object","code":""},{"path":"https://montilab.github.io/SigRepo/reference/checkOmicSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkOmicSignature — checkOmicSignature","text":"","code":"checkOmicSignature(omic_signature, check = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/checkOmicSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkOmicSignature — checkOmicSignature","text":"omic_signature R6 class object OmicSignature package check logical value determines whether OmicSignature object needs validated. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/checkPermissions.html","id":null,"dir":"Reference","previous_headings":"","what":"checkPermissions — checkPermissions","title":"checkPermissions — checkPermissions","text":"Check api key whether valid access database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/checkPermissions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkPermissions — checkPermissions","text":"","code":"checkPermissions(   conn,   action_type = c(\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"CREATE USER\"),   required_role = c(\"admin\", \"editor\", \"viewer\") )"},{"path":"https://montilab.github.io/SigRepo/reference/checkPermissions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkPermissions — checkPermissions","text":"conn established connection database using SigRepo::newConnhandler() action_type established connection database using SigRepo::newConnhandler() required_role established connection database using SigRepo::newConnhandler()","code":""},{"path":"https://montilab.github.io/SigRepo/reference/checkTableInput.html","id":null,"dir":"Reference","previous_headings":"","what":"checkTableInput — checkTableInput","title":"checkTableInput — checkTableInput","text":"Check table particular table database.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/checkTableInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkTableInput — checkTableInput","text":"","code":"checkTableInput(   conn,   db_table_name,   table,   exclude_coln_names = NULL,   check_db_table = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/checkTableInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkTableInput — checkTableInput","text":"conn established connection database using newConnhandler() db_table_name Name table database table data frame object exclude_coln_names list column names excluded check. check_db_table Check whether table exists database. Default = TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/conn_init.html","id":null,"dir":"Reference","previous_headings":"","what":"conn_init — conn_init","title":"conn_init — conn_init","text":"Initiate remote database connection","code":""},{"path":"https://montilab.github.io/SigRepo/reference/conn_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"conn_init — conn_init","text":"","code":"conn_init(conn_handler)"},{"path":"https://montilab.github.io/SigRepo/reference/conn_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"conn_init — conn_init","text":"conn_handler handler uses establish connection remote database obtained SigRepo::newConnhandler() (required)","code":""},{"path":"https://montilab.github.io/SigRepo/reference/conn_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"conn_init — conn_init","text":"MySQL connection class object","code":""},{"path":"https://montilab.github.io/SigRepo/reference/createCollectionMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"createCollectionMetadata — createCollectionMetadata","title":"createCollectionMetadata — createCollectionMetadata","text":"Create metadata object signature","code":""},{"path":"https://montilab.github.io/SigRepo/reference/createCollectionMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"createCollectionMetadata — createCollectionMetadata","text":"","code":"createCollectionMetadata(conn_handler, omic_collection)"},{"path":"https://montilab.github.io/SigRepo/reference/createCollectionMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"createCollectionMetadata — createCollectionMetadata","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) omic_collection collection OmicSignature objects OmicSignature package (required)","code":""},{"path":"https://montilab.github.io/SigRepo/reference/createHashKey.html","id":null,"dir":"Reference","previous_headings":"","what":"createHashKey — createHashKey","title":"createHashKey — createHashKey","text":"Check api key whether valid access database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/createHashKey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"createHashKey — createHashKey","text":"","code":"createHashKey(table, hash_var, hash_columns, hash_method = \"md5\")"},{"path":"https://montilab.github.io/SigRepo/reference/createHashKey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"createHashKey — createHashKey","text":"table data frame specific columns used create hash key hash_var hash variable created hash_columns specific columns used create hash key hash_method hashing method create key. Default md5.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/createOmicCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"createOmicCollection — createOmicCollection","title":"createOmicCollection — createOmicCollection","text":"Get collection set uploaded specific user database.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/createOmicCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"createOmicCollection — createOmicCollection","text":"","code":"createOmicCollection(conn_handler, db_collection_tbl)"},{"path":"https://montilab.github.io/SigRepo/reference/createOmicCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"createOmicCollection — createOmicCollection","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) db_collection_tbl collection table list signature ids made OmicSignatureCollection object (required)","code":""},{"path":"https://montilab.github.io/SigRepo/reference/createOmicSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"createOmicSignature — createOmicSignature","title":"createOmicSignature — createOmicSignature","text":"Get signature set uploaded specific user database.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/createOmicSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"createOmicSignature — createOmicSignature","text":"","code":"createOmicSignature(conn_handler, db_signature_tbl)"},{"path":"https://montilab.github.io/SigRepo/reference/createOmicSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"createOmicSignature — createOmicSignature","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) db_signature_tbl data frame contains list signatures made OmicSignature object (required)","code":""},{"path":"https://montilab.github.io/SigRepo/reference/createSignatureMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"createSignatureMetadata — createSignatureMetadata","title":"createSignatureMetadata — createSignatureMetadata","text":"Create metadata object signature","code":""},{"path":"https://montilab.github.io/SigRepo/reference/createSignatureMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"createSignatureMetadata — createSignatureMetadata","text":"","code":"createSignatureMetadata(conn_handler, omic_signature, verbose = FALSE)"},{"path":"https://montilab.github.io/SigRepo/reference/createSignatureMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"createSignatureMetadata — createSignatureMetadata","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) omic_signature R6 class object OmicSignature package (required) verbose logical value indicates whether print diagnostic messages. Default FALSE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deleteCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"deleteCollection — deleteCollection","title":"deleteCollection — deleteCollection","text":"Delete collection collection table database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deleteCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deleteCollection — deleteCollection","text":"","code":"deleteCollection(conn_handler, collection_id, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/deleteCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deleteCollection — deleteCollection","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) collection_id ID collection removed database (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deleteOrganism.html","id":null,"dir":"Reference","previous_headings":"","what":"deleteOrganism — deleteOrganism","title":"deleteOrganism — deleteOrganism","text":"Remove organisms database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deleteOrganism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deleteOrganism — deleteOrganism","text":"","code":"deleteOrganism(conn_handler, organism, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/deleteOrganism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deleteOrganism — deleteOrganism","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) organism list organisms removed (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deletePhenotype.html","id":null,"dir":"Reference","previous_headings":"","what":"deletePhenotype — deletePhenotype","title":"deletePhenotype — deletePhenotype","text":"Remove phenotypes database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deletePhenotype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deletePhenotype — deletePhenotype","text":"","code":"deletePhenotype(conn_handler, phenotype, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/deletePhenotype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deletePhenotype — deletePhenotype","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) phenotype list phenotypes removed (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deletePlatform.html","id":null,"dir":"Reference","previous_headings":"","what":"deletePlatform — deletePlatform","title":"deletePlatform — deletePlatform","text":"Remove platforms database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deletePlatform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deletePlatform — deletePlatform","text":"","code":"deletePlatform(conn_handler, platform_name, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/deletePlatform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deletePlatform — deletePlatform","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) platform_name list platform names removed (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deleteSampleType.html","id":null,"dir":"Reference","previous_headings":"","what":"deleteSampleType — deleteSampleType","title":"deleteSampleType — deleteSampleType","text":"Remove sample types database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deleteSampleType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deleteSampleType — deleteSampleType","text":"","code":"deleteSampleType(conn_handler, sample_type, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/deleteSampleType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deleteSampleType — deleteSampleType","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) sample_type list sample types removed (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deleteSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"deleteSignature — deleteSignature","title":"deleteSignature — deleteSignature","text":"Delete signature signatures table database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deleteSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deleteSignature — deleteSignature","text":"","code":"deleteSignature(conn_handler, signature_id, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/deleteSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deleteSignature — deleteSignature","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) signature_id ID signature removed database (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deleteUser.html","id":null,"dir":"Reference","previous_headings":"","what":"deleteUser — deleteUser","title":"deleteUser — deleteUser","text":"Delete user database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/deleteUser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deleteUser — deleteUser","text":"","code":"deleteUser(conn_handler, user_name, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/deleteUser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deleteUser — deleteUser","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) user_name Name user deleted (required). verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/delete_table_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"delete_table_sql — delete_table_sql","title":"delete_table_sql — delete_table_sql","text":"delete entry database table","code":""},{"path":"https://montilab.github.io/SigRepo/reference/delete_table_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"delete_table_sql — delete_table_sql","text":"","code":"delete_table_sql(   conn,   db_table_name,   delete_coln_var,   delete_coln_val,   check_db_table = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/delete_table_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"delete_table_sql — delete_table_sql","text":"conn established database connection db_table_name Name table database delete_coln_var column variable table removing rows delete_coln_val list values associated delete_coln_var removed. check_db_table whether check database table. Default = TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getAPIKey.html","id":null,"dir":"Reference","previous_headings":"","what":"getAPIKey — getAPIKey","title":"getAPIKey — getAPIKey","text":"Get API Key specific user database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getAPIKey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getAPIKey — getAPIKey","text":"","code":"getAPIKey(conn_handler)"},{"path":"https://montilab.github.io/SigRepo/reference/getAPIKey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getAPIKey — getAPIKey","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required)","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"getCollection — getCollection","title":"getCollection — getCollection","text":"Get list collection uploaded specified user database.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getCollection — getCollection","text":"","code":"getCollection(   conn_handler,   collection_name = NULL,   collection_id = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/getCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getCollection — getCollection","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) collection_name Name collection returned (required) collection_id ID collection returned (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getDBColNames.html","id":null,"dir":"Reference","previous_headings":"","what":"getDBColNames — getDBColNames","title":"getDBColNames — getDBColNames","text":"Get column names particular table database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getDBColNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getDBColNames — getDBColNames","text":"","code":"getDBColNames(   conn,   db_table_name,   check_db_table = TRUE,   exclude_coln_names = NULL )"},{"path":"https://montilab.github.io/SigRepo/reference/getDBColNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getDBColNames — getDBColNames","text":"conn established connection database using SigRepo::newConnhandler() db_table_name Name table database check_db_table Check whether table exists database. Default = TRUE exclude_coln_names optional flag exclude column names Colnames list.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getNumOfObs.html","id":null,"dir":"Reference","previous_headings":"","what":"getNumOfObs — getNumOfObs","title":"getNumOfObs — getNumOfObs","text":"Check api key whether valid access database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getNumOfObs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getNumOfObs — getNumOfObs","text":"","code":"getNumOfObs(conn, db_table_name)"},{"path":"https://montilab.github.io/SigRepo/reference/getNumOfObs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getNumOfObs — getNumOfObs","text":"conn established connection database using SigRepo::newConnhandler() db_table_name table database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"getSignature — getSignature","title":"getSignature — getSignature","text":"Get list signatures uploaded specified user database.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getSignature — getSignature","text":"","code":"getSignature(   conn_handler,   signature_name = NULL,   signature_id = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/getSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getSignature — getSignature","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) signature_name Name signature returned (required) signature_id ID signature returned (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getVariableID.html","id":null,"dir":"Reference","previous_headings":"","what":"getVariableID — getVariableID","title":"getVariableID — getVariableID","text":"Get variable ID looking primary key hash key","code":""},{"path":"https://montilab.github.io/SigRepo/reference/getVariableID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getVariableID — getVariableID","text":"","code":"getVariableID(   conn,   db_table_name,   table,   coln_var,   coln_var_id,   check_db_table = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/getVariableID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getVariableID — getVariableID","text":"conn established connection database using newConnhandler() db_table_name api key uses access database table api key uses access database coln_var api key uses access database coln_var_id api key uses access database check_db_table api key uses access database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/inactivateUser.html","id":null,"dir":"Reference","previous_headings":"","what":"inactivateUser — inactivateUser","title":"inactivateUser — inactivateUser","text":"Inactivate user database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/inactivateUser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"inactivateUser — inactivateUser","text":"","code":"inactivateUser(conn_handler, user_name, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/inactivateUser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"inactivateUser — inactivateUser","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) user_name Name user inactivated (required). verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/insert_table_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"insert_table_sql — insert_table_sql","title":"insert_table_sql — insert_table_sql","text":"Insert table database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/insert_table_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"insert_table_sql — insert_table_sql","text":"","code":"insert_table_sql(conn, db_table_name, table, check_db_table = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/insert_table_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"insert_table_sql — insert_table_sql","text":"conn established database connection db_table_name Name table database table table database check_db_table whether check database table. Default = TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/lookup_table_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"lookup_table_sql — lookup_table_sql","title":"lookup_table_sql — lookup_table_sql","text":"Look list variables based particular variable associated values database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/lookup_table_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lookup_table_sql — lookup_table_sql","text":"","code":"lookup_table_sql(   conn,   db_table_name,   return_var = \"*\",   filter_coln_var = NULL,   filter_coln_val = NULL,   filter_var_by = NULL,   check_db_table = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/lookup_table_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lookup_table_sql — lookup_table_sql","text":"conn established database connection db_table_name table database return_var list column variables returned given table. Default '*' (means everything). filter_coln_var list column variables given table. Default NULL. filter_coln_val list values associated 'filter_coln_var' variables. importantly, 'filter_coln_val' must names labels matched values 'filter_coln_var'. Default NULL. filter_var_by length(filter_coln_var) > 1, 'filter_var_by' must provided vector logical operators (e.g., /) n = length(filter_coln_var) - 1. Default NULL. check_db_table Check whether table exists database. Default = TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/newConnHandler.html","id":null,"dir":"Reference","previous_headings":"","what":"newConnHandler — newConnHandler","title":"newConnHandler — newConnHandler","text":"Create handler connect remote database.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/newConnHandler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"newConnHandler — newConnHandler","text":"","code":"newConnHandler(   dbname = \"sigrepo\",   host = \"sigrepo.org\",   port = 3306,   api_port = 8020,   user = \"guest\",   password = \"guest\" )"},{"path":"https://montilab.github.io/SigRepo/reference/newConnHandler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"newConnHandler — newConnHandler","text":"dbname Name MySQL database point (required) host Name server MySQL database hosted (required) port Port server connect MySQL database (required) api_port Port server access database API (required) user Name user establish connection (required) password Password associated user (required)","code":""},{"path":"https://montilab.github.io/SigRepo/reference/newConnHandler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"newConnHandler — newConnHandler","text":"list user credentials establish connection remote database.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/print_messages.html","id":null,"dir":"Reference","previous_headings":"","what":"print_messages — print_messages","title":"print_messages — print_messages","text":"Function whether print diagnostic messages ","code":""},{"path":"https://montilab.github.io/SigRepo/reference/print_messages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print_messages — print_messages","text":"","code":"print_messages(verbose)"},{"path":"https://montilab.github.io/SigRepo/reference/print_messages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print_messages — print_messages","text":"verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/protTransform.html","id":null,"dir":"Reference","previous_headings":"","what":"protTransform — protTransform","title":"protTransform — protTransform","text":"Function dynamically transform ftp uniprot data SigRepo dictionary structure","code":""},{"path":"https://montilab.github.io/SigRepo/reference/protTransform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"protTransform — protTransform","text":"","code":"protTransform(   organism_code = \"HUMAN\",   tax_id = \"9606\",   version = base::format(base::Sys.Date(), \"%m%d%Y\"),   is_current = 1 )"},{"path":"https://montilab.github.io/SigRepo/reference/protTransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"protTransform — protTransform","text":"organism_code organism name want retrieve data tax_id Taxonomic id organism version set date downloading ftp file is_current boolean feature_names current .","code":""},{"path":"https://montilab.github.io/SigRepo/reference/removeDuplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"removeDuplicates — removeDuplicates","title":"removeDuplicates — removeDuplicates","text":"Remove duplicates table database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/removeDuplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"removeDuplicates — removeDuplicates","text":"","code":"removeDuplicates(conn, db_table_name, table, coln_var, check_db_table = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/removeDuplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"removeDuplicates — removeDuplicates","text":"conn established connection database using SigRepo::newConnhandler() db_table_name Name table database table data frame object coln_var column variable data table check_db_table whether check database table. Default = TRUE","code":""},{"path":"https://montilab.github.io/SigRepo/reference/removeSignatureFromCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"removeSignatureFromCollection — removeSignatureFromCollection","title":"removeSignatureFromCollection — removeSignatureFromCollection","text":"Delete list signatures collection database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/removeSignatureFromCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"removeSignatureFromCollection — removeSignatureFromCollection","text":"","code":"removeSignatureFromCollection(   conn_handler,   collection_id,   signature_id,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/removeSignatureFromCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"removeSignatureFromCollection — removeSignatureFromCollection","text":"conn_handler handler uses establish connection remote database obtained SigRepo::newConnhandler() (required) collection_id ID collection database (required) signature_id list signature IDs removed collection database (required) verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"searchCollection — searchCollection","title":"searchCollection — searchCollection","text":"Search list collection database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"searchCollection — searchCollection","text":"","code":"searchCollection(   conn_handler,   collection_id = NULL,   collection_name = NULL,   signature_name = NULL,   signature_id = NULL,   user_name = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/searchCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"searchCollection — searchCollection","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) collection_id ID collection looked . collection_name Name collection looked . signature_name Name signatures looked . signature_id ID signatures looked . user_name Name users collection belongs . verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchOrganisms.html","id":null,"dir":"Reference","previous_headings":"","what":"searchOrganisms — searchOrganisms","title":"searchOrganisms — searchOrganisms","text":"Search list organisms database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchOrganisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"searchOrganisms — searchOrganisms","text":"","code":"searchOrganisms(conn_handler, organism = NULL, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/searchOrganisms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"searchOrganisms — searchOrganisms","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) organism list organisms search . Default NULL return organisms database. verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchPhenotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"searchPhenotypes — searchPhenotypes","title":"searchPhenotypes — searchPhenotypes","text":"Search list phenotypes database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchPhenotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"searchPhenotypes — searchPhenotypes","text":"","code":"searchPhenotypes(conn_handler, phenotype = NULL, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/searchPhenotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"searchPhenotypes — searchPhenotypes","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) phenotype list phenotypes search . Default NULL return phenotypes database verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchPlatforms.html","id":null,"dir":"Reference","previous_headings":"","what":"searchPlatforms — searchPlatforms","title":"searchPlatforms — searchPlatforms","text":"Search list platforms database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchPlatforms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"searchPlatforms — searchPlatforms","text":"","code":"searchPlatforms(conn_handler, platform_name = NULL, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/searchPlatforms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"searchPlatforms — searchPlatforms","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) platform_name list platform names looked . Default NULL return platforms database. verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchProteomicsFeatureSet.html","id":null,"dir":"Reference","previous_headings":"","what":"searchProteomicsFeatureSet — searchProteomicsFeatureSet","title":"searchProteomicsFeatureSet — searchProteomicsFeatureSet","text":"Search list proteomics features database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchProteomicsFeatureSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"searchProteomicsFeatureSet — searchProteomicsFeatureSet","text":"","code":"searchProteomicsFeatureSet(   conn_handler,   feature_name = NULL,   organism = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/searchProteomicsFeatureSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"searchProteomicsFeatureSet — searchProteomicsFeatureSet","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) feature_name list feature names look . organism list organism look . verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchSampleTypes.html","id":null,"dir":"Reference","previous_headings":"","what":"searchSampleTypes — searchSampleTypes","title":"searchSampleTypes — searchSampleTypes","text":"Search list sample types database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchSampleTypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"searchSampleTypes — searchSampleTypes","text":"","code":"searchSampleTypes(   conn_handler,   sample_type = NULL,   brenda_accession = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/searchSampleTypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"searchSampleTypes — searchSampleTypes","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) sample_type list sample types search . Default NULL return sample types database. brenda_accession list Brenda accession search . Default NULL. verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"searchSignature — searchSignature","title":"searchSignature — searchSignature","text":"Search list signatures database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"searchSignature — searchSignature","text":"","code":"searchSignature(   conn_handler,   signature_id = NULL,   signature_name = NULL,   user_name = NULL,   organism = NULL,   phenotype = NULL,   sample_type = NULL,   platform_name = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/searchSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"searchSignature — searchSignature","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) signature_id ID signatures looked . signature_name Name signatures looked . user_name name user looked . organism organism looked . phenotype phenotype looked . sample_type sample type looked . platform_name platform name looked . verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchTranscriptomicsFeatureSet.html","id":null,"dir":"Reference","previous_headings":"","what":"searchTranscriptomicsFeatureSet — searchTranscriptomicsFeatureSet","title":"searchTranscriptomicsFeatureSet — searchTranscriptomicsFeatureSet","text":"Search list transcriptomics features database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchTranscriptomicsFeatureSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"searchTranscriptomicsFeatureSet — searchTranscriptomicsFeatureSet","text":"","code":"searchTranscriptomicsFeatureSet(   conn_handler,   feature_name = NULL,   organism = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/searchTranscriptomicsFeatureSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"searchTranscriptomicsFeatureSet — searchTranscriptomicsFeatureSet","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) feature_name list feature names look . organism list organism look . verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchUser.html","id":null,"dir":"Reference","previous_headings":"","what":"searchUser — searchUser","title":"searchUser — searchUser","text":"Get phenotypes database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/searchUser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"searchUser — searchUser","text":"","code":"searchUser(conn_handler, user_name = NULL, verbose = TRUE)"},{"path":"https://montilab.github.io/SigRepo/reference/searchUser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"searchUser — searchUser","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) user_name list user names search . Default NULL return users database verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/showAssayTypeErrorMessage.html","id":null,"dir":"Reference","previous_headings":"","what":"showAssayTypeErrorMessage — showAssayTypeErrorMessage","title":"showAssayTypeErrorMessage — showAssayTypeErrorMessage","text":"Error message trying add unknown assay types database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/showAssayTypeErrorMessage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"showAssayTypeErrorMessage — showAssayTypeErrorMessage","text":"","code":"showAssayTypeErrorMessage(unknown_values)"},{"path":"https://montilab.github.io/SigRepo/reference/showAssayTypeErrorMessage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"showAssayTypeErrorMessage — showAssayTypeErrorMessage","text":"unknown_values unknown assay type","code":""},{"path":"https://montilab.github.io/SigRepo/reference/showOrganismErrorMessage.html","id":null,"dir":"Reference","previous_headings":"","what":"showOrganismErrorMessage — showOrganismErrorMessage","title":"showOrganismErrorMessage — showOrganismErrorMessage","text":"Error message trying add unknown organisms database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/showOrganismErrorMessage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"showOrganismErrorMessage — showOrganismErrorMessage","text":"","code":"showOrganismErrorMessage(db_table_name, unknown_values)"},{"path":"https://montilab.github.io/SigRepo/reference/showOrganismErrorMessage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"showOrganismErrorMessage — showOrganismErrorMessage","text":"db_table_name table name database unknown_values unknown values","code":""},{"path":"https://montilab.github.io/SigRepo/reference/showPlatformErrorMessage.html","id":null,"dir":"Reference","previous_headings":"","what":"showPlatformErrorMessage — showPlatformErrorMessage","title":"showPlatformErrorMessage — showPlatformErrorMessage","text":"Error message trying add unknown platforms database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/showPlatformErrorMessage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"showPlatformErrorMessage — showPlatformErrorMessage","text":"","code":"showPlatformErrorMessage(db_table_name, unknown_values)"},{"path":"https://montilab.github.io/SigRepo/reference/showPlatformErrorMessage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"showPlatformErrorMessage — showPlatformErrorMessage","text":"db_table_name table name database unknown_values unknown values","code":""},{"path":"https://montilab.github.io/SigRepo/reference/showProteomicsErrorMessage.html","id":null,"dir":"Reference","previous_headings":"","what":"showProteomicsErrorMessage — showProteomicsErrorMessage","title":"showProteomicsErrorMessage — showProteomicsErrorMessage","text":"Error message trying add unknown Proteomics Features database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/showProteomicsErrorMessage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"showProteomicsErrorMessage — showProteomicsErrorMessage","text":"","code":"showProteomicsErrorMessage(db_table_name, unknown_values)"},{"path":"https://montilab.github.io/SigRepo/reference/showProteomicsErrorMessage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"showProteomicsErrorMessage — showProteomicsErrorMessage","text":"db_table_name table name database unknown_values unknown values","code":""},{"path":"https://montilab.github.io/SigRepo/reference/showSampleTypeErrorMessage.html","id":null,"dir":"Reference","previous_headings":"","what":"showSampleTypeErrorMessage — showSampleTypeErrorMessage","title":"showSampleTypeErrorMessage — showSampleTypeErrorMessage","text":"Error message trying add unknown sample types database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/showSampleTypeErrorMessage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"showSampleTypeErrorMessage — showSampleTypeErrorMessage","text":"","code":"showSampleTypeErrorMessage(db_table_name, unknown_values)"},{"path":"https://montilab.github.io/SigRepo/reference/showSampleTypeErrorMessage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"showSampleTypeErrorMessage — showSampleTypeErrorMessage","text":"db_table_name table name database unknown_values unknown values","code":""},{"path":"https://montilab.github.io/SigRepo/reference/showTranscriptomicsErrorMessage.html","id":null,"dir":"Reference","previous_headings":"","what":"showTranscriptomicsErrorMessage — showTranscriptomicsErrorMessage","title":"showTranscriptomicsErrorMessage — showTranscriptomicsErrorMessage","text":"Error message trying add unknown Transcriptomics Features database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/showTranscriptomicsErrorMessage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"showTranscriptomicsErrorMessage — showTranscriptomicsErrorMessage","text":"","code":"showTranscriptomicsErrorMessage(db_table_name, unknown_values)"},{"path":"https://montilab.github.io/SigRepo/reference/showTranscriptomicsErrorMessage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"showTranscriptomicsErrorMessage — showTranscriptomicsErrorMessage","text":"db_table_name table name database unknown_values unknown values","code":""},{"path":"https://montilab.github.io/SigRepo/reference/updateCollectionMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"updateCollectionMetadata — updateCollectionMetadata","title":"updateCollectionMetadata — updateCollectionMetadata","text":"Update metadata collection database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/updateCollectionMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"updateCollectionMetadata — updateCollectionMetadata","text":"","code":"updateCollectionMetadata(   conn_handler,   collection_id,   collection_name = NULL,   description = NULL,   visibility = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/updateCollectionMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"updateCollectionMetadata — updateCollectionMetadata","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) collection_id ID collection database updated (required) collection_name Name collection changed. description Description collection changed. visibility logical value indicates whether allow others view access one's uploaded collection. Default FALSE. verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/updateSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"updateSignature — updateSignature","title":"updateSignature — updateSignature","text":"Update signature database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/updateSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"updateSignature — updateSignature","text":"","code":"updateSignature(   conn_handler,   signature_id,   omic_signature,   visibility = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/updateSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"updateSignature — updateSignature","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) signature_id ID signature updated (required) omic_signature R6 class object OmicSignature package (required) visibility logical value indicates whether allow others view access one's uploaded signature. Default FALSE. verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/updateUser.html","id":null,"dir":"Reference","previous_headings":"","what":"updateUser — updateUser","title":"updateUser — updateUser","text":"Update user database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/updateUser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"updateUser — updateUser","text":"","code":"updateUser(   conn_handler,   user_name,   password = NULL,   email = NULL,   first_name = NULL,   last_name = NULL,   affiliation = NULL,   role = NULL,   active = NULL,   verbose = TRUE )"},{"path":"https://montilab.github.io/SigRepo/reference/updateUser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"updateUser — updateUser","text":"conn_handler handler uses establish connection database obtained SigRepo::newConnhandler() (required) user_name Name user updated (required). password Password user updated. Default NULL. email Email user updated. Default NULL. first_name First name user updated. Default NULL last_name Last name user updated. Default NULL. affiliation Affiliation user. Default NULL. role Role user updated. Choices admin/editor/viewer. active Whether make user TRUE (active) FALSE (inactive). Default NULL. verbose logical value indicates whether print diagnostic messages. Default TRUE.","code":""},{"path":"https://montilab.github.io/SigRepo/reference/validateUser.html","id":null,"dir":"Reference","previous_headings":"","what":"validateUser — validateUser","title":"validateUser — validateUser","text":"Validate user database","code":""},{"path":"https://montilab.github.io/SigRepo/reference/validateUser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"validateUser — validateUser","text":"","code":"validateUser(conn_handler)"},{"path":"https://montilab.github.io/SigRepo/reference/validateUser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"validateUser — validateUser","text":"conn_handler handler uses establish connection remote database obtained SigRepo::newConnhandler() (required)","code":""},{"path":"https://montilab.github.io/SigRepo/reference/verbose.html","id":null,"dir":"Reference","previous_headings":"","what":"verbose — verbose","title":"verbose — verbose","text":"Function whether print diagnostic messages ","code":""},{"path":"https://montilab.github.io/SigRepo/reference/verbose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"verbose — verbose","text":"","code":"verbose(...)"}]
